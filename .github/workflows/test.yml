name: Test Book Examples

# Run on all pushes and pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUST_VERSION: "1.75.0"
  MDBOOK_VERSION: "0.4.37"
  RUCHY_VERSION: "0.4.13"  # Exact version pinning

jobs:
  # Job 1: Validate all code listings compile
  test-listings:
    name: Test Code Listings
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Run listing tests
        run: |
          echo "Testing all code listings..."
          cargo test --tests
      
      - name: Verify no SATD comments
        run: |
          ! grep -r "TODO\|FIXME\|HACK" src/ listings/
      
      - name: Check version consistency
        run: |
          echo "Checking all listings use ruchy=${{ env.RUCHY_VERSION }}"
          find listings -name "Cargo.toml" -exec grep -H "ruchy = " {} \; | \
            grep -v "=\"${{ env.RUCHY_VERSION }}\"" && exit 1 || exit 0

  # Job 2: Build and validate the book
  build-book:
    name: Build mdBook
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install mdBook
        run: |
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v${MDBOOK_VERSION}/mdbook-v${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          chmod +x mdbook
          sudo mv mdbook /usr/local/bin/
      
      - name: Build book
        run: mdbook build
      
      - name: Upload book artifacts
        uses: actions/upload-artifact@v4
        with:
          name: book-html
          path: book/
          retention-days: 7

  # Job 3: Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install mdBook
        run: |
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v${MDBOOK_VERSION}/mdbook-v${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          chmod +x mdbook
          sudo mv mdbook /usr/local/bin/
      
      - name: Install mdbook-linkcheck
        run: |
          cargo install mdbook-linkcheck --version 0.7.7
      
      - name: Gate 1: No SATD comments
        run: |
          echo "Checking for SATD comments..."
          ! grep -r "TODO\|FIXME\|HACK" src/ || \
            (echo "❌ BLOCKED: SATD comments found" && exit 1)
      
      - name: Gate 2: No vaporware documentation
        run: |
          echo "Checking for vaporware..."
          ! grep -r "coming soon\|not yet implemented\|will be\|future release" src/ || \
            (echo "❌ BLOCKED: Vaporware documentation found" && exit 1)
      
      - name: Gate 3: No placeholder content
        run: |
          echo "Checking for placeholders..."
          ! grep -r "\[placeholder\]\|\[TODO\]\|XXX\|TBD" src/ || \
            (echo "❌ BLOCKED: Placeholder content found" && exit 1)
      
      - name: Gate 4: All listings compile
        run: |
          cargo test --tests
      
      - name: Gate 5: No broken links
        run: |
          mdbook-linkcheck || \
            (echo "⚠️ Warning: Broken links found" && exit 0)
      
      - name: Gate 6: Clean workspace
        run: |
          echo "Checking for debug artifacts..."
          ! ls test_* debug_* *.tmp *.bak 2>/dev/null || \
            (echo "❌ BLOCKED: Debug artifacts found" && exit 1)

  # Job 4: Performance benchmarks
  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build for performance issues
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check compilation time
        run: |
          echo "Measuring compilation time for examples..."
          START=$(date +%s)
          cargo test --tests --no-run
          END=$(date +%s)
          DURATION=$((END - START))
          echo "Compilation took ${DURATION} seconds"
          if [ $DURATION -gt 300 ]; then
            echo "⚠️ Warning: Compilation took more than 5 minutes"
          fi
      
      - name: Check book size
        run: |
          mdbook build
          SIZE=$(du -sh book/ | cut -f1)
          echo "Book size: $SIZE"

  # Job 5: Matrix testing across platforms
  cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --tests