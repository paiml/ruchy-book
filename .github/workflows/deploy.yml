name: Deploy mdBook to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: Install mdBook
      run: |
        curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.52/mdbook-v0.4.52-x86_64-unknown-linux-gnu.tar.gz | tar -xz
        sudo mv mdbook /usr/local/bin/
        mdbook --version

    - name: Build book with mdBook  
      run: |
        echo "üìö Building The Ruchy Programming Language book..."
        mdbook build
        echo "‚úÖ Book built successfully!"
        
        # Verify build output
        echo "üìä Verifying build output:"
        ls -la book/
        echo ""
        echo "üîç Checking main files:"
        ls -la book/index.html book/CNAME || true
        echo ""
        echo "üìÑ Book size:"
        du -sh book/

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload book directory
        path: 'book'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify deployment
      run: |
        echo "üéâ Deployment completed!"
        echo "üìç Site URL: ${{ steps.deployment.outputs.page_url }}"
        
        # Test the deployment
        echo "üß™ Testing deployment..."
        
        # Test GitHub Pages URL
        if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
          echo "‚úÖ GitHub Pages URL is accessible"
        else
          echo "‚ö†Ô∏è GitHub Pages URL not immediately accessible (may take a moment)"
        fi