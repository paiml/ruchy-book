name: Deploy mdBook to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: Install mdBook
      run: |
        curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.52/mdbook-v0.4.52-x86_64-unknown-linux-gnu.tar.gz | tar -xz
        sudo mv mdbook /usr/local/bin/
        mdbook --version

    - name: Build book with mdBook  
      run: |
        echo "📚 Building The Ruchy Programming Language book..."
        mdbook build
        echo "✅ Book built successfully!"
        
        # Verify build output
        echo "📊 Verifying build output:"
        ls -la book/
        echo ""
        echo "🔍 Checking main files:"
        ls -la book/index.html book/CNAME || true
        echo ""
        echo "📄 Book size:"
        du -sh book/

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload book directory
        path: 'book'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify deployment
      run: |
        echo "🎉 Deployment completed!"
        echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "🌐 Custom domain: https://book.ruchy.org"
        
        # Wait a moment for DNS propagation
        echo "⏳ Waiting 30 seconds for DNS propagation..."
        sleep 30
        
        # Test the deployment
        echo "🧪 Testing deployment..."
        
        # Test GitHub Pages URL
        if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
          echo "✅ GitHub Pages URL is accessible"
        else
          echo "❌ GitHub Pages URL failed"
        fi
        
        # Test custom domain
        if curl -f -s -L --max-redirs 5 --connect-timeout 30 "https://book.ruchy.org" > /dev/null; then
          echo "✅ Custom domain book.ruchy.org is accessible"
        else
          echo "⚠️  Custom domain book.ruchy.org not yet accessible (DNS may still be propagating)"
        fi

    - name: Create deployment status comment
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const sha = context.sha;
          
          // Create a deployment status comment
          const body = `
          ## 🚀 Deployment Status
          
          **Book successfully deployed!**
          
          📚 **The Ruchy Programming Language** is now live at:
          - 🌐 **Primary URL**: https://book.ruchy.org
          - 🔗 **GitHub Pages**: ${{ steps.deployment.outputs.page_url }}
          
          **Deployment Details:**
          - Commit: ${sha.substring(0, 7)}
          - Timestamp: ${new Date().toISOString()}
          - Status: ✅ SUCCESS
          
          The book contains 19 comprehensive chapters plus 5 detailed appendices covering everything from beginner concepts to production deployment.
          `;
          
          // Find existing deployment comments
          const comments = await github.rest.issues.listCommentsForRepo({
            owner,
            repo,
            since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Last 24 hours
          });
          
          const deploymentComments = comments.data.filter(comment => 
            comment.body.includes('🚀 Deployment Status') && 
            comment.user.login === 'github-actions[bot]'
          );
          
          // Delete old deployment comments to avoid clutter
          for (const comment of deploymentComments) {
            await github.rest.issues.deleteComment({
              owner,
              repo,
              comment_id: comment.id
            });
          }
          
          // Create new deployment comment
          await github.rest.issues.create({
            owner,
            repo,
            title: '📚 Book Deployment Successful',
            body: body,
            labels: ['deployment', 'success']
          });