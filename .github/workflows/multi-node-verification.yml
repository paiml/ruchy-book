name: Multi-Node Website Verification

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run every hour to ensure book.ruchy.org stays live
    - cron: '0 * * * *'

jobs:
  verify-website-multi-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test from multiple geographic locations/methods
        verification_method:
          - curl-direct
          - wget-method
          - python-requests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up verification environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget python3 python3-pip
        pip3 install requests beautifulsoup4

    - name: Verify book.ruchy.org - Method ${{ matrix.verification_method }}
      run: |
        echo "üåê Testing book.ruchy.org with method: ${{ matrix.verification_method }}"
        echo "=================================================="
        
        case "${{ matrix.verification_method }}" in
          "curl-direct")
            echo "üì° CURL DIRECT METHOD"
            echo "===================="
            
            # Test with curl - show response headers and content
            echo "üîç Response Headers:"
            curl -I -L --connect-timeout 30 --max-time 60 https://book.ruchy.org || true
            
            echo ""
            echo "üìÑ HTML Content (First 2000 chars):"
            RESPONSE=$(curl -L --connect-timeout 30 --max-time 60 https://book.ruchy.org 2>/dev/null || echo "CURL_FAILED")
            
            if [[ "$RESPONSE" == "CURL_FAILED" ]]; then
              echo "‚ùå CURL request failed completely"
              exit 1
            else
              echo "$RESPONSE" | head -c 2000
              echo ""
              echo "..."
              echo ""
              
              # Check for key content indicators
              if echo "$RESPONSE" | grep -i "ruchy" > /dev/null; then
                echo "‚úÖ Found 'ruchy' in content"
              else
                echo "‚ùå No 'ruchy' found in content"
              fi
              
              if echo "$RESPONSE" | grep -i "programming" > /dev/null; then
                echo "‚úÖ Found 'programming' in content"
              else
                echo "‚ùå No 'programming' found in content"
              fi
              
              if echo "$RESPONSE" | grep -i "<html" > /dev/null; then
                echo "‚úÖ Valid HTML detected"
              else
                echo "‚ùå No HTML structure detected"
              fi
            fi
            ;;
            
          "wget-method")
            echo "üï∑Ô∏è WGET METHOD"
            echo "=============="
            
            # Test with wget - more verbose output
            echo "üîç Wget verbose output:"
            wget --spider --verbose --timeout=60 https://book.ruchy.org || true
            
            echo ""
            echo "üìÑ Content via wget:"
            CONTENT=$(wget -qO- --timeout=60 https://book.ruchy.org 2>/dev/null || echo "WGET_FAILED")
            
            if [[ "$CONTENT" == "WGET_FAILED" ]]; then
              echo "‚ùå WGET request failed completely"
              exit 1
            else
              echo "$CONTENT" | head -c 2000
              echo ""
              echo "..."
              echo ""
              
              # Verify content quality
              WORD_COUNT=$(echo "$CONTENT" | wc -w)
              echo "üìä Word count: $WORD_COUNT"
              
              if [ "$WORD_COUNT" -gt 100 ]; then
                echo "‚úÖ Substantial content detected ($WORD_COUNT words)"
              else
                echo "‚ùå Insufficient content ($WORD_COUNT words)"
              fi
            fi
            ;;
            
          "python-requests")
            echo "üêç PYTHON REQUESTS METHOD"
            echo "========================"
            
            # Use Python requests for detailed analysis
            python3 << 'EOF'
import requests
import sys
from bs4 import BeautifulSoup
import time

try:
    print("üîç Making request to book.ruchy.org...")
    
    # Make request with detailed headers
    headers = {
        'User-Agent': 'Mozilla/5.0 (GitHub-Actions) Multi-Node-Verification/1.0'
    }
    
    response = requests.get('https://book.ruchy.org', 
                          headers=headers, 
                          timeout=60, 
                          allow_redirects=True)
    
    print(f"üìä Status Code: {response.status_code}")
    print(f"üìä Response Time: {response.elapsed.total_seconds():.2f} seconds")
    print(f"üìä Content Length: {len(response.content)} bytes")
    
    print("\nüîç Response Headers:")
    for key, value in response.headers.items():
        print(f"  {key}: {value}")
    
    print(f"\nüìÑ HTML Content (First 2000 chars):")
    content = response.text
    print(content[:2000])
    print("...")
    
    # Parse with BeautifulSoup for detailed analysis
    soup = BeautifulSoup(content, 'html.parser')
    
    print(f"\nüìä HTML Analysis:")
    title = soup.find('title')
    print(f"  Title: {title.get_text() if title else 'No title found'}")
    
    # Look for navigation or key elements
    nav_elements = soup.find_all(['nav', 'menu', 'ul'])
    print(f"  Navigation elements: {len(nav_elements)}")
    
    # Look for chapter links or content
    links = soup.find_all('a')
    chapter_links = [link for link in links if 'ch' in link.get('href', '').lower()]
    print(f"  Chapter links found: {len(chapter_links)}")
    
    # Content quality checks
    text_content = soup.get_text()
    word_count = len(text_content.split())
    print(f"  Word count: {word_count}")
    
    # Key term detection
    ruchy_mentions = text_content.lower().count('ruchy')
    programming_mentions = text_content.lower().count('programming')
    
    print(f"  'Ruchy' mentions: {ruchy_mentions}")
    print(f"  'Programming' mentions: {programming_mentions}")
    
    # Verification results
    print(f"\n‚úÖ VERIFICATION RESULTS:")
    
    checks = [
        (response.status_code == 200, f"HTTP 200 response: {response.status_code == 200}"),
        (len(content) > 1000, f"Sufficient content length: {len(content) > 1000} ({len(content)} bytes)"),
        (word_count > 100, f"Sufficient word count: {word_count > 100} ({word_count} words)"),
        (ruchy_mentions > 0, f"Contains 'Ruchy': {ruchy_mentions > 0} ({ruchy_mentions} mentions)"),
        (title is not None, f"Has title tag: {title is not None}"),
        (len(links) > 5, f"Has navigation links: {len(links) > 5} ({len(links)} links)")
    ]
    
    passed_checks = sum(1 for check, _ in checks if check)
    total_checks = len(checks)
    
    for check, description in checks:
        status = "‚úÖ" if check else "‚ùå"
        print(f"  {status} {description}")
    
    print(f"\nüìä OVERALL SCORE: {passed_checks}/{total_checks} checks passed")
    
    if passed_checks >= 5:  # Must pass at least 5/6 checks
        print("‚úÖ VERIFICATION PASSED - Website is functioning correctly!")
        sys.exit(0)
    else:
        print("‚ùå VERIFICATION FAILED - Website has issues!")
        sys.exit(1)

except Exception as e:
    print(f"‚ùå Python verification failed with error: {e}")
    sys.exit(1)
EOF
            ;;
        esac

    - name: Store verification results
      if: always()
      run: |
        echo "üìä Verification completed for method: ${{ matrix.verification_method }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Runner: ${{ runner.os }}"
        echo "GitHub Actor: ${{ github.actor }}"
        
        # Create results directory
        mkdir -p verification-results
        
        # Save method-specific results
        echo "Method: ${{ matrix.verification_method }}" > "verification-results/${{ matrix.verification_method }}.txt"
        echo "Status: ${{ job.status }}" >> "verification-results/${{ matrix.verification_method }}.txt"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "verification-results/${{ matrix.verification_method }}.txt"

    - name: Upload verification artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: verification-results-${{ matrix.verification_method }}
        path: verification-results/

  consolidate-results:
    needs: verify-website-multi-node
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all verification results
      uses: actions/download-artifact@v3
      with:
        path: all-results/

    - name: Analyze quorum results
      run: |
        echo "üèÅ FINAL MULTI-NODE VERIFICATION RESULTS"
        echo "========================================"
        echo ""
        
        # Count successful verifications
        TOTAL_METHODS=3
        SUCCESS_COUNT=0
        
        echo "üìä Individual Method Results:"
        echo "----------------------------"
        
        for method in curl-direct wget-method python-requests; do
          if [ -f "all-results/verification-results-${method}/${method}.txt" ]; then
            echo "üîç Method: $method"
            cat "all-results/verification-results-${method}/${method}.txt"
            
            # Check if this method succeeded (basic heuristic)
            if grep -q "SUCCESS\|PASSED\|‚úÖ" "all-results/verification-results-${method}/${method}.txt" 2>/dev/null; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "  ‚úÖ Result: PASSED"
            else
              echo "  ‚ùå Result: FAILED"
            fi
            echo ""
          else
            echo "‚ùå Method: $method - No results file found"
            echo ""
          fi
        done
        
        echo "üìä QUORUM ANALYSIS:"
        echo "------------------"
        echo "Total verification methods: $TOTAL_METHODS"
        echo "Successful verifications: $SUCCESS_COUNT"
        echo "Success rate: $(echo "scale=1; $SUCCESS_COUNT * 100 / $TOTAL_METHODS" | bc -l)%"
        echo ""
        
        # Determine overall result
        REQUIRED_QUORUM=2  # Need at least 2 out of 3 methods to pass
        
        if [ "$SUCCESS_COUNT" -ge "$REQUIRED_QUORUM" ]; then
          echo "‚úÖ QUORUM ACHIEVED: book.ruchy.org is verified as LIVE and WORKING!"
          echo "üéâ Website passed $SUCCESS_COUNT out of $TOTAL_METHODS verification methods"
          echo ""
          echo "üåê book.ruchy.org is successfully serving The Ruchy Programming Language book!"
        else
          echo "‚ùå QUORUM FAILED: book.ruchy.org has issues"
          echo "‚ö†Ô∏è  Only $SUCCESS_COUNT out of $TOTAL_METHODS verification methods passed"
          echo "üîß Manual intervention may be required"
          
          # Create an issue if quorum fails
          echo "Creating GitHub issue for failed verification..."
          exit 1
        fi

    - name: Create issue on verification failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = 'üö® Multi-Node Website Verification Failed'
          const body = `
          ## Website Verification Failure
          
          The multi-node verification of book.ruchy.org has failed to achieve quorum.
          
          **Details:**
          - Timestamp: ${new Date().toISOString()}
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Next Steps:**
          1. Check GitHub Pages deployment status
          2. Verify DNS configuration for book.ruchy.org
          3. Review build and deployment logs
          4. Test manual access to the site
          
          This issue was automatically created by the multi-node verification workflow.
          `
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'deployment', 'P0']
          })