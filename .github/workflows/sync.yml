name: Sync with Ruchy Releases

# Run daily to check for new Ruchy releases and create PRs
on:
  schedule:
    - cron: '0 8 * * *'  # Daily at 8 AM UTC
  workflow_dispatch:  # Allow manual trigger
  repository_dispatch:
    types: [ruchy-release]  # Trigger from ruchy repo

env:
  RUST_VERSION: "1.75.0"

jobs:
  check-version:
    name: Check for Ruchy Updates
    runs-on: ubuntu-latest
    outputs:
      needs-update: ${{ steps.version-check.outputs.needs-update }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
      current-version: ${{ steps.version-check.outputs.current-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Check versions
        id: version-check
        run: |
          # Get latest ruchy version from crates.io
          LATEST=$(cargo search ruchy --limit 1 | grep "^ruchy " | cut -d'"' -f2)
          echo "Latest version: $LATEST"
          
          # Get current version from Cargo.toml
          CURRENT=$(grep 'ruchy = ' Cargo.toml | cut -d'"' -f2 | sed 's/=//')
          echo "Current version: $CURRENT"
          
          # Set outputs
          echo "latest-version=$LATEST" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT" >> $GITHUB_OUTPUT
          
          if [ "$LATEST" != "$CURRENT" ]; then
            echo "needs-update=true" >> $GITHUB_OUTPUT
            echo "üì¶ Update available: $CURRENT ‚Üí $LATEST"
          else
            echo "needs-update=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Already up to date: $CURRENT"
          fi

  update-version:
    name: Update to Ruchy ${{ needs.check-version.outputs.latest-version }}
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.needs-update == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Create update branch
        run: |
          BRANCH="update-ruchy-${{ needs.check-version.outputs.latest-version }}"
          git checkout -b "$BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      
      - name: Update versions
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.latest-version }}"
          
          echo "Updating root Cargo.toml..."
          sed -i "s/ruchy = \".*\"/ruchy = \"=$NEW_VERSION\"/" Cargo.toml
          
          echo "Updating all listing Cargo.toml files..."
          find listings -name "Cargo.toml" -exec \
            sed -i "s/ruchy = \".*\"/ruchy = \"=$NEW_VERSION\"/" {} \;
          
          echo "Updating CI workflow..."
          sed -i "s/RUCHY_VERSION: \".*\"/RUCHY_VERSION: \"$NEW_VERSION\"/" \
            .github/workflows/test.yml
          
          echo "Updated to ruchy $NEW_VERSION"
      
      - name: Test with new version
        run: |
          echo "üß™ Testing with ruchy ${{ needs.check-version.outputs.latest-version }}..."
          cargo test --tests || {
            echo "‚ùå Tests failed with new version"
            exit 1
          }
          echo "‚úÖ Tests passed with new version"
      
      - name: Build book with new version
        run: |
          echo "üìö Building book with new version..."
          
          # Install mdBook
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.37/mdbook-v0.4.37-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          chmod +x mdbook
          sudo mv mdbook /usr/local/bin/
          
          mdbook build || {
            echo "‚ùå Book build failed with new version"
            exit 1
          }
          echo "‚úÖ Book builds successfully with new version"
      
      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.latest-version }}"
          OLD_VERSION="${{ needs.check-version.outputs.current-version }}"
          
          # Create changelog entry
          cat > CHANGELOG.tmp << EOF
          ## Version $NEW_VERSION
          
          - Updated to Ruchy $NEW_VERSION
          - All examples verified to compile with new version
          - Automatic sync from ruchy releases
          
          EOF
          
          # Prepend to existing changelog if it exists
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> CHANGELOG.tmp
          fi
          mv CHANGELOG.tmp CHANGELOG.md
      
      - name: Commit changes
        run: |
          git add -A
          git commit -m "Update to ruchy ${{ needs.check-version.outputs.latest-version }}

          Automated version sync:
          - Updated root Cargo.toml: ruchy = \"=${{ needs.check-version.outputs.latest-version }}\"
          - Updated all listing Cargo.toml files
          - Updated CI workflow version
          - Verified all tests pass
          - Verified book builds successfully

          Previous: ${{ needs.check-version.outputs.current-version }}
          Current: ${{ needs.check-version.outputs.latest-version }}"
      
      - name: Push branch
        run: |
          git push origin "$BRANCH"
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH }}
          title: "Update to ruchy ${{ needs.check-version.outputs.latest-version }}"
          body: |
            ## Automated Ruchy Version Update
            
            This PR updates the book to use Ruchy `${{ needs.check-version.outputs.latest-version }}`.
            
            ### Changes
            - üì¶ Updated from `${{ needs.check-version.outputs.current-version }}` to `${{ needs.check-version.outputs.latest-version }}`
            - ‚úÖ All tests passing
            - ‚úÖ Book builds successfully
            - üîÑ Version sync complete
            
            ### Testing
            - [x] All code listings compile
            - [x] Quality gates pass
            - [x] Book builds without errors
            
            ### Merge Requirements
            - [ ] Review changes
            - [ ] Verify deployment
            
            ---
            ü§ñ This PR was created automatically by the sync workflow.
          labels: |
            version-update
            automated

  report-status:
    name: Report Sync Status
    runs-on: ubuntu-latest
    needs: [check-version, update-version]
    if: always()
    
    steps:
      - name: No update needed
        if: needs.check-version.outputs.needs-update == 'false'
        run: |
          echo "‚úÖ No update needed"
          echo "Current version ${{ needs.check-version.outputs.current-version }} is up to date"
      
      - name: Update successful
        if: needs.check-version.outputs.needs-update == 'true' && needs.update-version.result == 'success'
        run: |
          echo "‚úÖ Update PR created successfully"
          echo "Updated from ${{ needs.check-version.outputs.current-version }} to ${{ needs.check-version.outputs.latest-version }}"
      
      - name: Update failed
        if: needs.check-version.outputs.needs-update == 'true' && needs.update-version.result == 'failure'
        run: |
          echo "‚ùå Update failed"
          echo "Could not update from ${{ needs.check-version.outputs.current-version }} to ${{ needs.check-version.outputs.latest-version }}"
          exit 1