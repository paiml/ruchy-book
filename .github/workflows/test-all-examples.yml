name: Book Compatibility Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every 6 hours to track compatibility changes
    - cron: '0 */6 * * *'

jobs:
  test-book-examples:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout ruchy-book
        uses: actions/checkout@v4
        
      - name: Checkout ruchy compiler
        uses: actions/checkout@v4
        with:
          repository: paiml/ruchy
          path: ruchy
          
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ruchy/target
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build ruchy compiler
        run: |
          cd ruchy
          cargo build --release
          
      - name: Install Deno for example extraction
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
          
      - name: Extract examples from book
        run: |
          deno run --allow-read --allow-write --allow-run scripts/extract-examples.ts
          
      - name: Run book compatibility tests
        run: |
          cargo test --test test_all_examples -- --nocapture
          
      - name: Generate status report
        run: |
          deno task generate-report
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: book-compatibility-${{ github.run_number }}
          path: |
            reports/
            test/extracted-examples/
          retention-days: 30
          
      - name: Test one-liner examples
        run: |
          deno task test-oneliners
          
      - name: Check compatibility regression
        run: |
          # Extract success rate from reports
          SUCCESS_RATE=$(jq -r '.summary.success_rate' reports/status-report.json)
          echo "Current success rate: ${SUCCESS_RATE}%"
          
          # Fail if success rate drops below 25% (current baseline)
          if (( $(echo "$SUCCESS_RATE < 25" | bc -l) )); then
            echo "❌ REGRESSION: Success rate dropped below 25% baseline"
            exit 1
          fi
          
          echo "✅ No regression detected"
          
      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('reports/status-report.json', 'utf8'));
            
            const comment = `## 📊 Book Compatibility Test Results
            
            **Overall Statistics:**
            - ✅ Passing: ${report.summary.working_examples}/${report.summary.total_examples} (${report.summary.success_rate}%)
            - 🎯 One-liners: ${report.oneliners?.passing || 'N/A'}/${report.oneliners?.total || 'N/A'} (${report.oneliners?.success_rate || 'N/A'}%)
            - 📚 Total Examples: ${report.summary.total_examples}
            
            **Chapter Leaders:**
            ${Object.entries(report.chapters || {})
              .filter(([_, data]) => data.success_rate >= 80)
              .map(([chapter, data]) => `- 🟢 ${chapter}: ${data.working_examples}/${data.total_examples} (${data.success_rate}%)`)
              .join('\n')}
            
            📋 [Full Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });