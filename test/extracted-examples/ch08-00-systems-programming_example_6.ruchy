// File: health_check.ruchy
// Monitor system health and alert on issues

println("=== System Health Checker ===")

let checks = {
    cpu_threshold: 80,      // Alert if CPU > 80%
    memory_threshold: 90,   // Alert if memory > 90%
    disk_threshold: 95,     // Alert if disk > 95%
    load_threshold: 4.0,    // Alert if load average > 4
    temp_threshold: 80      // Alert if CPU temp > 80¬∞C
}

let alerts = []

fn check_cpu() {
    let usage = system::cpu_usage() * 100
    if usage > checks.cpu_threshold {
        alerts.push({
            level: "WARNING",
            message: f"CPU usage high: {usage:.1}%",
            time: current_datetime()
        })
        return false
    }
    return true
}

fn check_memory() {
    let mem = system::memory_info()
    let usage = (mem.used / mem.total) * 100
    if usage > checks.memory_threshold {
        alerts.push({
            level: "CRITICAL",
            message: f"Memory usage critical: {usage:.1}%",
            time: current_datetime()
        })
        return false
    }
    return true
}

fn check_disk() {
    let disks = system::disk_usage()
    for disk in disks {
        let usage = (disk.used / disk.total) * 100
        if usage > checks.disk_threshold {
            alerts.push({
                level: "WARNING",
                message: f"Disk {disk.mount} almost full: {usage:.1}%",
                time: current_datetime()
            })
            return false
        }
    }
    return true
}

fn check_load() {
    let load = system::load_average()
    let cpu_count = system::cpu_count()
    let normalized_load = load.one_minute / cpu_count
    
    if normalized_load > checks.load_threshold {
        alerts.push({
            level: "WARNING",
            message: f"System load high: {load.one_minute:.2}",
            time: current_datetime()
        })
        return false
    }
    return true
}

fn check_temperature() {
    let temps = system::temperatures()
    for sensor in temps {
        if sensor.current > checks.temp_threshold {
            alerts.push({
                level: "CRITICAL",
                message: f"Temperature critical: {sensor.name} at {sensor.current}¬∞C",
                time: current_datetime()
            })
            return false
        }
    }
    return true
}

fn run_health_checks() {
    let all_healthy = true
    
    all_healthy = check_cpu() && all_healthy
    all_healthy = check_memory() && all_healthy
    all_healthy = check_disk() && all_healthy
    all_healthy = check_load() && all_healthy
    all_healthy = check_temperature() && all_healthy
    
    return all_healthy
}

// Main monitoring loop
loop {
    clear_screen()
    println(f"System Health Check - {current_datetime()}")
    println("=" * 50)
    
    let healthy = run_health_checks()
    
    if healthy {
        println("‚úÖ All systems healthy")
    } else {
        println("‚ö†Ô∏è  Issues detected:")
        for alert in alerts.last(5) {
            let icon = alert.level == "CRITICAL" ? "üî¥" : "üü°"
            println(f"{icon} [{alert.level}] {alert.message}")
        }
    }
    
    // Show current stats
    println("\nCurrent Status:")
    let cpu = system::cpu_usage() * 100
    let mem = system::memory_info()
    let mem_percent = (mem.used / mem.total) * 100
    let load = system::load_average()
    
    println(f"CPU:    {cpu:5.1}% / {checks.cpu_threshold}%")
    println(f"Memory: {mem_percent:5.1}% / {checks.memory_threshold}%")
    println(f"Load:   {load.one_minute:5.2} / {checks.load_threshold}")
    
    // Send notifications for critical alerts
    for alert in alerts {
        if alert.level == "CRITICAL" {
            system::notify(alert.message, "System Health Alert")
        }
    }
    
    sleep(5000)  // Check every 5 seconds
}