// File: service_manager.ruchy
// Manage system services

println("=== Service Manager ===")

let services = [
    {name: "web_server", command: "./server", port: 8080},
    {name: "worker", command: "./worker", count: 4},
    {name: "scheduler", command: "./scheduler", interval: 60}
]

let running_services = {}

fn start_service(service) {
    println(f"Starting {service.name}...")
    
    match service.name {
        "web_server" => {
            let proc = process::spawn(service.command, [
                "--port", service.port.to_s()
            ])
            running_services[service.name] = proc
            
            // Wait for port to be available
            while !network::port_is_open("localhost", service.port) {
                sleep(100)
            }
            println(f"âœ… {service.name} listening on port {service.port}")
        }
        "worker" => {
            let workers = []
            for i in range(service.count) {
                let proc = process::spawn(service.command, [
                    "--id", i.to_s()
                ])
                workers.push(proc)
            }
            running_services[service.name] = workers
            println(f"âœ… Started {service.count} workers")
        }
        "scheduler" => {
            let proc = process::spawn(service.command, [
                "--interval", service.interval.to_s()
            ])
            running_services[service.name] = proc
            println(f"âœ… Scheduler running every {service.interval}s")
        }
    }
}

fn stop_service(name) {
    if running_services.has_key(name) {
        println(f"Stopping {name}...")
        let proc = running_services[name]
        
        if proc.is_array() {
            // Multiple processes (workers)
            for p in proc {
                p.terminate()
                p.wait()
            }
        } else {
            // Single process
            proc.terminate()
            proc.wait()
        }
        
        running_services.remove(name)
        println(f"âœ… {name} stopped")
    }
}

fn service_status() {
    println("\n=== Service Status ===")
    for service in services {
        let status = if running_services.has_key(service.name) {
            "ðŸŸ¢ Running"
        } else {
            "ðŸ”´ Stopped"
        }
        println(f"{service.name:15} {status}")
    }
}

// Handle shutdown gracefully
signal::on(SIGTERM, || {
    println("\nShutting down all services...")
    for name in running_services.keys() {
        stop_service(name)
    }
    exit(0)
})

// Interactive management
loop {
    service_status()
    println("\nCommands: start <name>, stop <name>, restart <name>, quit")
    let command = input("> ").split(" ")
    
    match command[0] {
        "start" => start_service(services.find(|s| s.name == command[1]))
        "stop" => stop_service(command[1])
        "restart" => {
            stop_service(command[1])
            start_service(services.find(|s| s.name == command[1]))
        }
        "quit" => break
        _ => println("Unknown command")
    }
}