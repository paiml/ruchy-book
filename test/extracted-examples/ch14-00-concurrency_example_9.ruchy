// Actor trait
trait Actor {
    type Message
    
    fn handle(&mut self, msg: Self::Message)
}

// Example actor
struct CounterActor {
    count: i32
}

enum CounterMessage {
    Increment
    Decrement
    Get(Sender<i32>)
}

impl Actor for CounterActor {
    type Message = CounterMessage
    
    fn handle(&mut self, msg: CounterMessage) {
        match msg {
            Increment => self.count += 1
            Decrement => self.count -= 1
            Get(reply) => reply.send(self.count)
        }
    }
}

// Actor system
struct ActorSystem {
    actors: HashMap<String, Box<dyn Actor>>
}

impl ActorSystem {
    fn spawn<A: Actor>(&mut self, name: String, actor: A) -> ActorRef<A> {
        let (tx, rx) = channel()
        
        spawn move {
            let mut actor = actor
            while let Ok(msg) = rx.recv() {
                actor.handle(msg)
            }
        }
        
        ActorRef { name, sender: tx }
    }
}

// Use actors
let system = ActorSystem::new()
let counter = system.spawn("counter", CounterActor { count: 0 })

counter.send(Increment)
counter.send(Increment)

let (tx, rx) = channel()
counter.send(Get(tx))
let count = rx.recv()
println(f"Count: {count}")  // 2