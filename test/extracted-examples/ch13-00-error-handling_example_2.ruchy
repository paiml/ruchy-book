// Result is an enum with two variants
enum Result<T, E> {
    Ok(T)    // Success with value
    Err(E)   // Error with error value
}

// Functions that can fail return Result
fn divide(a: f64, b: f64) -> Result<f64, String> {
    if b == 0.0 {
        return Err("Division by zero")
    }
    return Ok(a / b)
}

// Check and handle results
let result = divide(10.0, 2.0)
if result.is_ok() {
    println(f"Result: {result.unwrap()}")
} else {
    println(f"Error: {result.unwrap_err()}")
}

// Pattern matching
match divide(10.0, 0.0) {
    Ok(value) => println(f"Success: {value}")
    Err(error) => println(f"Failed: {error}")
}