// Fixture trait
trait TestFixture {
    fn setup() -> Self
    fn teardown(self)
}

// Database fixture
struct DatabaseFixture {
    db: Database
    test_data: Vec<User>
}

impl TestFixture for DatabaseFixture {
    fn setup() -> Self {
        let db = Database::connect(":memory:")
        db.migrate()
        
        let test_data = vec![
            User::new("Alice", "alice@example.com"),
            User::new("Bob", "bob@example.com")
        ]
        
        for user in &test_data {
            db.insert(user)
        }
        
        DatabaseFixture { db, test_data }
    }
    
    fn teardown(self) {
        self.db.drop_all_tables()
        self.db.disconnect()
    }
}

// Use fixture in tests
#[test]
fn test_user_query() {
    let fixture = DatabaseFixture::setup()
    
    let users = fixture.db.query("SELECT * FROM users")
    assert_eq!(users.len(), 2)
    
    fixture.teardown()
}

// Fixture macro for automatic cleanup
#[with_fixture(DatabaseFixture)]
fn test_with_auto_cleanup(fixture: DatabaseFixture) {
    // Fixture automatically cleaned up after test
    let user = fixture.db.find_user("Alice")
    assert!(user.is_some())
}