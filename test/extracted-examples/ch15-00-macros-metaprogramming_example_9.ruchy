// Hygienic macros prevent name collisions
macro! safe_swap {
    ($a:expr, $b:expr) => {
        {
            // Generated names won't conflict
            let __temp = $a
            $a = $b
            $b = __temp
        }
    }
}

// Best practices:
// 1. Keep macros simple
// 2. Provide good error messages
macro! validate {
    ($expr:expr) => {
        if !$expr {
            compile_error!(concat!(
                "Validation failed: ",
                stringify!($expr)
            ))
        }
    }
}

// 3. Document macro syntax
/// Creates a new vector with the given elements
/// 
/// # Example
/// ```
/// let v = vec![1, 2, 3]
/// ```
macro! vec {
    // Implementation
}

// 4. Use macro namespaces
mod macros {
    macro! internal_helper {
        // Not exported
    }
    
    #[macro_export]
    macro! public_macro {
        // Exported
    }
}

// 5. Test macros thoroughly
#[test]
fn test_macro() {
    let result = my_macro!(input)
    assert_eq!(result, expected)
}