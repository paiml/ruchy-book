// File: api_server.ruchy
// RESTful API with database

use std::net::http;
use std::db;

let app = http::Server::new("0.0.0.0:3000")
let database = db::connect("sqlite:data.db")

// CORS middleware
app.use(|req, res, next| {
    res.header("Access-Control-Allow-Origin", "*")
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
    next()
})

// Authentication middleware
fn require_auth(req, res, next) {
    let token = req.header("Authorization")
    if !token || !validate_token(token) {
        return res.status(401).json({error: "Unauthorized"})
    }
    req.user = decode_token(token)
    next()
}

// Routes
app.get("/api/posts", |req, res| {
    let page = req.query("page", 1)
    let limit = req.query("limit", 10)
    
    let posts = database.query("
        SELECT * FROM posts 
        ORDER BY created_at DESC 
        LIMIT ? OFFSET ?
    ", [limit, (page - 1) * limit])
    
    res.json({
        posts: posts,
        page: page,
        total: database.count("posts")
    })
})

app.get("/api/posts/:id", |req, res| {
    let id = req.params.id
    let post = database.find("posts", id)
    
    if post {
        res.json(post)
    } else {
        res.status(404).json({error: "Post not found"})
    }
})

app.post("/api/posts", require_auth, |req, res| {
    let post = req.json()
    post.author_id = req.user.id
    post.created_at = current_datetime()
    
    let id = database.insert("posts", post)
    let created = database.find("posts", id)
    
    res.status(201).json(created)
})

app.put("/api/posts/:id", require_auth, |req, res| {
    let id = req.params.id
    let updates = req.json()
    
    // Check ownership
    let post = database.find("posts", id)
    if post.author_id != req.user.id {
        return res.status(403).json({error: "Forbidden"})
    }
    
    updates.updated_at = current_datetime()
    database.update("posts", id, updates)
    
    res.json(database.find("posts", id))
})

app.delete("/api/posts/:id", require_auth, |req, res| {
    let id = req.params.id
    
    // Check ownership
    let post = database.find("posts", id)
    if post.author_id != req.user.id {
        return res.status(403).json({error: "Forbidden"})
    }
    
    database.delete("posts", id)
    res.status(204).send()
})

// Error handling
app.use(|err, req, res, next| {
    console.error(f"Error: {err}")
    res.status(500).json({
        error: "Internal server error",
        message: err.message
    })
})

println("ðŸš€ API server running on http://localhost:3000")
app.listen()