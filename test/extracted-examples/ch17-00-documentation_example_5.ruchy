//! # System Architecture
//! 
//! ## Overview
//! 
//! This application follows a layered architecture:
//! 
//! ```text
//! ┌─────────────────────────────────┐
//! │          HTTP Layer             │
//! │  (Handlers, Middleware, Routes) │
//! └─────────────┬───────────────────┘
//!               │
//! ┌─────────────▼───────────────────┐
//! │        Service Layer            │
//! │   (Business Logic, Validation)  │
//! └─────────────┬───────────────────┘
//!               │
//! ┌─────────────▼───────────────────┐
//! │      Repository Layer           │
//! │    (Database Access, Caching)   │
//! └─────────────┬───────────────────┘
//!               │
//! ┌─────────────▼───────────────────┐
//! │         Data Layer              │
//! │    (PostgreSQL, Redis, S3)      │
//! └─────────────────────────────────┘
//! ```
//! 
//! ## Data Flow
//! 
//! 1. Request enters through HTTP handler
//! 2. Handler validates input and calls service
//! 3. Service applies business logic
//! 4. Repository handles data persistence
//! 5. Response flows back through layers
//! 
//! ## Key Design Decisions
//! 
//! ### Why Layered Architecture?
//! 
//! - **Separation of Concerns**: Each layer has a single responsibility
//! - **Testability**: Layers can be tested independently with mocks
//! - **Flexibility**: Easy to swap implementations (e.g., database)
//! 
//! ### Why Event Sourcing?
//! 
//! - **Audit Trail**: Complete history of all changes
//! - **Time Travel**: Can reconstruct state at any point
//! - **Event Replay**: Easy to fix bugs in event processing

/// Module containing HTTP handlers
pub mod handlers {
    //! HTTP request handlers.
    //! 
    //! Each handler is responsible for:
    //! - Request validation
    //! - Calling appropriate service
    //! - Response formatting
}

/// Module containing business logic
pub mod services {
    //! Business logic layer.
    //! 
    //! Services contain all business rules and orchestrate
    //! operations across multiple repositories.
}