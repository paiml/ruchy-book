// Without ? operator - verbose
fn process_file_verbose(path: String) -> Result<String, Error> {
    let file = match open_file(path) {
        Ok(f) => f
        Err(e) => return Err(e)
    }
    
    let contents = match read_all(file) {
        Ok(c) => c
        Err(e) => return Err(e)
    }
    
    let processed = match process(contents) {
        Ok(p) => p
        Err(e) => return Err(e)
    }
    
    return Ok(processed)
}

// With ? operator - clean
fn process_file(path: String) -> Result<String, Error> {
    let file = open_file(path)?
    let contents = read_all(file)?
    let processed = process(contents)?
    return Ok(processed)
}

// Chain multiple operations
fn complex_operation() -> Result<Data, Error> {
    let data = fetch_data()?
        .validate()?
        .transform()?
        .optimize()?
    
    return Ok(data)
}