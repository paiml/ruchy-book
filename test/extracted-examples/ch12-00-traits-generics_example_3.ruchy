struct Point {
    x: f64
    y: f64
}

impl Drawable for Point {
    fn draw(self) {
        println(f"Point at ({self.x}, {self.y})")
    }
}

struct Circle {
    center: Point
    radius: f64
}

impl Drawable for Circle {
    fn draw(self) {
        println(f"Circle at ({self.center.x}, {self.center.y}) with radius {self.radius}")
    }
}

// Now both types can be drawn
let p = Point{x: 10, y: 20}
let c = Circle{center: p, radius: 5}

p.draw()  // Trait method
c.draw()  // Same interface, different implementation

// Implement traits for existing types
impl Drawable for String {
    fn draw(self) {
        println(f"Text: {self}")
    }
}

"Hello".draw()  // Extension methods!