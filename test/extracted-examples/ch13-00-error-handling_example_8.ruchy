// Trait for adding context
trait Context<T> {
    fn context(self, msg: String) -> Result<T, Error>
    fn with_context<F>(self, f: F) -> Result<T, Error>
        where F: FnOnce() -> String
}

impl<T, E: Into<Error>> Context<T> for Result<T, E> {
    fn context(self, msg: String) -> Result<T, Error> {
        self.map_err(|e| {
            Error::new(e.into())
                .with_message(msg)
        })
    }
    
    fn with_context<F>(self, f: F) -> Result<T, Error>
        where F: FnOnce() -> String
    {
        self.map_err(|e| {
            Error::new(e.into())
                .with_message(f())
        })
    }
}

// Use context for better errors
fn process_order(order_id: i32) -> Result<Order, Error> {
    let order = fetch_order(order_id)
        .context(f"Failed to fetch order {order_id}")?
    
    let validated = validate_order(order)
        .context("Order validation failed")?
    
    let processed = process_payment(validated)
        .with_context(|| f"Payment processing failed for ${validated.total}")?
    
    return Ok(processed)
}