// File: memory_optimization.ruchy
// Reduce memory usage

// 1. Use generators for large datasets
fn read_large_file_naive(path) {
    return read_file(path).lines()  // Loads entire file
}

fn read_large_file_optimized(path) {
    // Generator - yields lines one at a time
    return generate {
        let file = open(path)
        while !file.eof() {
            yield file.read_line()
        }
        file.close()
    }
}

// 2. Object pooling
let connection_pool = Pool::new(
    create: || Database::connect(),
    reset: |conn| conn.clear()
)

fn handle_request(request) {
    let conn = connection_pool.acquire()
    let result = conn.query(request.sql)
    connection_pool.release(conn)
    return result
}

// 3. Weak references for caches
let cache = WeakMap::new()

fn get_cached_data(key) {
    if cache.has(key) {
        return cache.get(key)
    }
    
    let data = expensive_load(key)
    cache.set(key, data)
    return data
}

// 4. Compact data structures
struct CompactUser {
    id: u32,        // 4 bytes instead of 8
    flags: u8,      // Bit flags instead of booleans
    name: String    // Single allocation
}