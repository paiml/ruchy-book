// Trait for plugins
trait Plugin {
    fn name(self) -> String
    fn execute(self, context: Context) -> Result<(), Error>
}

struct LogPlugin {
    level: String
}

impl Plugin for LogPlugin {
    fn name(self) -> String {
        return "Logger"
    }
    
    fn execute(self, context: Context) -> Result<(), Error> {
        log(self.level, context.message)
        return Ok(())
    }
}

// Store different plugin types
let plugins: Vec<Box<dyn Plugin>> = vec![
    Box::new(LogPlugin{level: "INFO"}),
    Box::new(MetricsPlugin{...}),
    Box::new(CachePlugin{...})
]

// Execute all plugins
for plugin in plugins {
    plugin.execute(context)?
}