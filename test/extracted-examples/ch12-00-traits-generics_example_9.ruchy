// Associated types pattern
trait Graph {
    type Node
    type Edge
    
    fn nodes(self) -> Vec<Node>
    fn edges(self) -> Vec<Edge>
    fn neighbors(self, node: Node) -> Vec<Node>
}

struct SocialNetwork {
    users: Vec<User>
    connections: Vec<Friendship>
}

impl Graph for SocialNetwork {
    type Node = User
    type Edge = Friendship
    
    fn nodes(self) -> Vec<User> {
        return self.users
    }
    
    fn edges(self) -> Vec<Friendship> {
        return self.connections
    }
    
    fn neighbors(self, user: User) -> Vec<User> {
        self.connections
            .filter(|f| f.from == user.id || f.to == user.id)
            .map(|f| self.get_user(f.other_id(user.id)))
            .collect()
    }
}

// Phantom types for compile-time guarantees
struct Id<T> {
    value: String
    _phantom: PhantomData<T>
}

impl<T> Id<T> {
    fn new(value: String) -> Id<T> {
        return Id{value, _phantom: PhantomData}
    }
}

// Type-safe IDs
let user_id: Id<User> = Id::new("user_123")
let post_id: Id<Post> = Id::new("post_456")

// Won't compile - type safety!
// let wrong = user_id == post_id