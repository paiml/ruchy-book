=== ch02-00-variables-types-tdd example 9 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `polars`
 --> /tmp/.tmpQBrfqc/main.rs:1:31
  |
1 | fn main () { let sales_data = polars :: prelude :: DataFrame :: new (vec ! []) . column ("product" , vec ! ["Widget" , "Gadget"]) . colum...
  |                               ^^^^^^ use of unresolved module or unlinked crate `polars`
  |
  = help: you might be missing a crate named `polars`

error: aborting due to 1 previous error

For more information about this error, try `rustc --explain E0433`.



=== ch02-00-variables-types-tdd example 10 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 1 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 2 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 3 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `polars`
 --> /tmp/.tmpbreQFJ/main.rs:1:32
  |
1 | fn load_csv_data () { let df = polars :: prelude :: CsvReader :: from_path ("data/customers.csv") . unwrap () . finish () . unwrap () ; ;...
  |                                ^^^^^^ use of unresolved module or unlinked crate `polars`
  |
  = help: you might be missing a crate named `polars`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `polars`
 --> /tmp/.tmpbreQFJ/main.rs:1:155
  |
1 | ...sh () . unwrap () ; ; let df_custom = polars :: prelude :: CsvReader :: from_path ("data/sales.csv") . unwrap () . finish () . unwrap ...
  |                                          ^^^^^^ use of unresolved module or unlinked crate `polars`
  |
  = help: you might be missing a crate named `polars`

warning: unnecessary trailing semicolon
 --> /tmp/.tmpbreQFJ/main.rs:1:137
  |
1 | ...stomers.csv") . unwrap () . finish () . unwrap () ; ; let df_custom = polars :: prelude :: CsvReader :: from_path ("data/sales.csv") ....
  |                                                        ^ help: remove this semicolon
  |
  = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
 --> /tmp/.tmpbreQFJ/main.rs:1:581
  |
1 | ...:?}" , "Loaded {} records" , df_inline . rows ()) ; ; } fn main () { }
  |                                                        ^ help: remove this semicolon

error[E0433]: failed to resolve: use of undeclared type `DataFrame`
 --> /tmp/.tmpbreQFJ/main.rs:1:469
  |
1 | ...,45,Austin" . to_string () ; let df_inline = DataFrame :: from_csv_string (csv_string) ; println ! ("{} {:?}" , "Loaded {} records" , ...
  |                                                 ^^^^^^^^^ use of undeclared type `DataFrame`

error: aborting due to 3 previous errors; 2 warnings emitted

For more information about this error, try `rustc --explain E0433`.



=== ch18-00-dataframes-data-processing example 4 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 5 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 6 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 7 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 8 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 9 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 10 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 11 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 12 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 13 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 14 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 15 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 16 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 17 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 18 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 19 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 20 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 21 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 22 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 23 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch18-00-dataframes-data-processing example 24 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch10-00-input-output-tdd example 11 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `polars`
 --> /tmp/.tmpbpaJJA/main.rs:1:29
  |
1 | fn main () { let sales_df = polars :: prelude :: CsvReader :: from_path ("sales_data.csv") . unwrap () . finish () . unwrap () ; println ...
  |                             ^^^^^^ use of unresolved module or unlinked crate `polars`
  |
  = help: you might be missing a crate named `polars`

error[E0433]: failed to resolve: use of undeclared type `DataFrame`
 --> /tmp/.tmpbpaJJA/main.rs:1:221
  |
1 | ...s" , sales_df . rows ()) ; let products_df = DataFrame :: from_json ("products.json") ; println ! ("{} {:?}" , "Loaded {} products" , ...
  |                                                 ^^^^^^^^^ use of undeclared type `DataFrame`

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0433`.



=== ch10-00-input-output-tdd example 12 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch10-00-input-output-tdd example 13 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch17-00-error-handling-robustness example 3 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
warning: unnecessary trailing semicolon
 --> /tmp/.tmpUEQSo4/main.rs:1:163
  |
1 | ...er") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess...
  |                                                        ^ help: remove this semicolon
  |
  = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
 --> /tmp/.tmpUEQSo4/main.rs:1:184
  |
1 | ...} ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f6...
  |                                                        ^ help: remove this semicolon

warning: unnecessary braces around block return value
 --> /tmp/.tmpUEQSo4/main.rs:1:270
  |
1 | ...ess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ...
  |                                                               ^^            ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
1 + fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { return guess } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpUEQSo4/main.rs:1:626
  |
1 | ...20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { l...
  |                                                               ^^           ^^
  |
help: remove these braces
  |
1 - fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
1 + fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { return 1i32 ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmpUEQSo4/main.rs:1:479
  |
1 | ... -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println !...
  |        --- expected `i64` because of return type                                                    ^^^^ expected `i64`, found `i32`
  |
help: change the type of the numeric literal from `i32` to `i64`
  |
1 - fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
1 + fn safe_sqrt (x : f64) -> f64 { if x < 0f64 { { println ! ("Error: Cannot compute square root of negative number") ; return 0f64 } } ; let mut guess = x / 2f64 ; ; let mut i = 0i32 ; ; while i < 10i32 { { if guess * guess > x - 0.01f64 && guess * guess < x + 0.01f64 { { return guess } } ; guess = (guess + x / guess) / 2f64 ; i = i + 1i32 } } ; guess } fn safe_factorial (n : i32) -> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i64 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; let sqrt2 = safe_sqrt (- 4f64) ; let fact1 = safe_factorial (5i32) ; let fact2 = safe_factorial (- 3i32) ; let fact3 = safe_factorial (25i32) ; println ! ("{} {:?} {:?}" , "Square roots: {:.2}, {:.2}" , sqrt1 , sqrt2) ; println ! ("{} {:?} {:?} {:?}" , "Factorials: {}, {}, {}" , fact1 , fact2 , fact3) ; }
  |

warning: unreachable expression
 --> /tmp/.tmpUEQSo4/main.rs:1:642
  |
1 | ...i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } fn main () { let sqrt1 = safe_sqrt (16f64) ; le...
  |                                -----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression
  |                                |
  |                                any code following this expression is unreachable
  |
  = note: `#[warn(unreachable_code)]` on by default

error[E0317]: `if` may be missing an `else` clause
 --> /tmp/.tmpUEQSo4/main.rs:1:611
  |
1 | ...-> i64 { if n < 0i32 { { println ! ("Error: Factorial undefined for negative numbers") ; return 0i32 } } ; if n > 20i32 { { println ! ("Error: Factorial too large, computing factorial(20)") ; return safe_factorial (20i32) } } ; if n <= 1i32 { { return 1i32 } ((n as i64)) * safe_factorial (n - 1i32) } } ...
  |       --- expected `i64` because of this return type                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `()`
  |
  = note: `if` expressions without `else` evaluate to `()`
  = help: consider adding an `else` block that evaluates to the expected type

error: aborting due to 2 previous errors; 5 warnings emitted

Some errors have detailed explanations: E0308, E0317.
For more information about an error, try `rustc --explain E0308`.



=== ch17-00-error-handling-robustness example 4 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch17-00-error-handling-robustness example 7 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0308]: mismatched types
 --> /tmp/.tmpXm0N5i/main.rs:1:77
  |
1 | fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; retu...
  |                                                        -----------------    ^^^^ expected `usize`, found `i32`
  |                                                        |
  |                                                        expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
1 + fn sanitize_username (username : & str) -> String { if username . len () == 0usize { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmpXm0N5i/main.rs:1:199
  |
1 | ...n String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; r...
  |                                            -----------------   ^^^^ expected `usize`, found `i32`
  |                                            |
  |                                            expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
1 + fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3usize { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmpXm0N5i/main.rs:1:335
  |
1 | ...rn String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; retu...
  |                                           -----------------   ^^^^^ expected `usize`, found `i32`
  |                                           |
  |                                           expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
1 + fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20usize { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
  |

error[E0308]: mismatched types
    --> /tmp/.tmpXm0N5i/main.rs:1:441
     |
1    | ... characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if...
     |                                                 ----  ^^^^^ expected `usize`, found `i32`
     |                                                 |
     |                                                 arguments to this method are incorrect
     |
note: method defined here
    --> /home/noah/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1387:8
     |
1387 |     fn take(self, n: usize) -> Take<Self>
     |        ^^^^
help: change the type of the numeric literal from `i32` to `usize`
     |
1    - fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
1    + fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20usize) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
     |

error[E0308]: mismatched types
 --> /tmp/.tmpXm0N5i/main.rs:1:467
  |
1 | ...-> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } ...
  |       ------                                                                                                                                                                                                                                                                                                                                                                                                                                 ^^^^^^^^- help: try using a conversion method: `.to_string()`
  |       |                                                                                                                                                                                                                                                                                                                                                                                                                                      |
  |       expected `String` because of return type                                                                                                                                                                                                                                                                                                                                                                                               expected `String`, found `&str`

error[E0308]: mismatched types
 --> /tmp/.tmpXm0N5i/main.rs:1:543
  |
1 | ...idate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if...
  |                                             --------------    ^^^^ expected `usize`, found `i32`
  |                                             |
  |                                             expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0i32 { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
1 + fn sanitize_username (username : & str) -> String { if username . len () == 0i32 { { println ! ("Error: Username cannot be empty") ; return String :: from ("anonymous") } } ; if username . len () < 3i32 { { println ! ("Error: Username too short, minimum 3 characters") ; return String :: from ("user123") } } ; if username . len () > 20i32 { { println ! ("Warning: Username truncated to 20 characters") ; return username . chars () . take (20i32) . collect () } } ; username } fn validate_email (email : & str) -> bool { if email . len () == 0usize { { println ! ("Error: Email cannot be empty") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format - missing @") ; return false } } ; if ! email . contains ('.') { { println ! ("Error: Invalid email format - missing domain") ; return false } } ; return true } fn create_user_account (username : & str , email : & str) -> bool { println ! ("Creating user account...") ; let safe_username = sanitize_username (username) ; let valid_email = validate_email (email) ; if ! valid_email { { println ! ("❌ Account creation failed: Invalid email") ; return false } } ; println ! ("{} {:?}" , "✅ Account created for user: {}" , safe_username) ; return true } fn main () { let success1 = create_user_account ("john_doe" , "john@example.com") ; let success2 = create_user_account ("" , "invalid-email") ; let success3 = create_user_account ("ab" , "test@domain.co.uk") ; println ! ("{} {:?} {:?} {:?}" , "Account creation results: {}, {}, {}" , success1 , success2 , success3) ; }
  |

error: aborting due to 6 previous errors

For more information about this error, try `rustc --explain E0308`.



=== ch17-00-error-handling-robustness example 8 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch17-00-error-handling-robustness example 9 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
warning: unnecessary trailing semicolon
 --> /tmp/.tmpiBWp6a/main.rs:1:630
  |
1 | ...intln ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let a...
  |                                                         ^ help: remove this semicolon
  |
  = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:153
  |
1 | ...vide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test...
  |                                               ^^                                            ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { println ! ("✅ Normal division test passed") } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:210
  |
1 | ...✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ...
  |                                                ^^                                            ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { println ! ("❌ Normal division test failed") } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:326
  |
1 | ...de (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero ...
  |                                             ^^                                                 ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { println ! ("✅ Division by zero handling passed") } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:388
  |
1 | ...ion by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , ...
  |                                             ^^                                                 ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { println ! ("❌ Division by zero handling failed") } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:513
  |
1 | ...- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number ha...
  |                                             ^^                                                ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { println ! ("✅ Negative number handling passed") } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:574
  |
1 | ...tive number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { prin...
  |                                             ^^                                                ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { println ! ("❌ Negative number handling failed") } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary trailing semicolon
 --> /tmp/.tmpiBWp6a/main.rs:1:1186
  |
1 | ...{ println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_vali...
  |                                                         ^ help: remove this semicolon

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:761
  |
1 | ...1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed")...
  |                                                  ^^                                      ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { println ! ("✅ Valid age test passed") } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:812
  |
1 | ...ntln ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 =...
  |                                                   ^^                                      ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { println ! ("❌ Valid age test failed") } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:911
  |
1 | ... validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handli...
  |                                               ^^                                             ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { println ! ("✅ Negative age handling passed") } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:969
  |
1 | ... Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if ag...
  |                                                ^^                                             ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { println ! ("❌ Negative age handling failed") } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:1077
  |
1 | ...alidate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling...
  |                                               ^^                                            ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { println ! ("✅ Extreme age handling passed") } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpiBWp6a/main.rs:1:1134
  |
1 | ...✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_hand...
  |                                                ^^                                            ^^
  |
help: remove these braces
  |
1 - fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { { println ! ("❌ Extreme age handling failed") } } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
1 + fn test_division_error_handling () { println ! ("Testing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test passed") } } else { { println ! ("❌ Normal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero handling passed") } } else { { println ! ("❌ Division by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number handling passed") } } else { { println ! ("❌ Negative number handling failed") } } ; ; } fn test_input_validation () { println ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } else { { println ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed") } } else { { println ! ("❌ Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed") } } else { println ! ("❌ Extreme age handling failed") } ; ; } fn main () { test_division_error_handling () ; println ! ("") ; test_input_validation () ; println ! ("") ; println ! ("🎉 Error handling tests complete!") ; }
  |

error[E0425]: cannot find function `safe_divide` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:103
  |
1 | ...ing division error handling...") ; let result1 = safe_divide (10i32 , 2i32) ; if result1 == 5i32 { { println ! ("✅ Normal division test...
  |                                                     ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `safe_divide` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:276
  |
1 | ...ormal division test failed") } } ; let result2 = safe_divide (10i32 , 0i32) ; if result2 == 0i32 { { println ! ("✅ Division by zero hand...
  |                                                      ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `safe_divide` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:459
  |
1 | ...on by zero handling failed") } } ; let result3 = safe_divide (- 10i32 , 2i32) ; if result3 == - 5i32 { { println ! ("✅ Negative number ...
  |                                                     ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `validate_age` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:719
  |
1 | ...n ! ("Testing input validation...") ; let age1 = validate_age (25i32) ; if age1 == 25i32 { { println ! ("✅ Valid age test passed") } } ...
  |                                                     ^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `validate_age` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:869
  |
1 | ...n ! ("❌ Valid age test failed") } } ; let age2 = validate_age (- 5i32) ; if age2 == 0i32 { { println ! ("✅ Negative age handling passed"...
  |                                                      ^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `validate_age` in this scope
 --> /tmp/.tmpiBWp6a/main.rs:1:1033
  |
1 | ... Negative age handling failed") } } ; let age3 = validate_age (200i32) ; if age3 == 150i32 { { println ! ("✅ Extreme age handling passed...
  |                                                      ^^^^^^^^^^^^ not found in this scope

error: aborting due to 6 previous errors; 14 warnings emitted

For more information about this error, try `rustc --explain E0425`.



=== ch17-00-error-handling-robustness example 10 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
warning: unnecessary braces around block return value
 --> /tmp/.tmp9VEsYr/main.rs:1:726
  |
1 | ... if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" ...
  |                                  ^^                                                                     ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
1 + fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmp9VEsYr/main.rs:1:1349
  |
1 | ...32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println !...
  |                                                      ^^                              ^^
  |
help: remove these braces
  |
1 - fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
1 + fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { successful = successful + 1i32 } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmp9VEsYr/main.rs:1:615
  |
1 | ...er ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false ...
  |                                             -------------    ^^^^ expected `usize`, found `i32`
  |                                             |
  |                                             expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
1 + fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0usize { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmp9VEsYr/main.rs:1:716
  |
1 | ...data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limi...
  |                                            -------------   ^^^^^^^ expected `usize`, found `i32`
  |                                            |
  |                                            expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000i32 { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
1 + fn log_error (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[ERROR] {}: {}" , component , message) } fn log_warning (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[WARN] {}: {}" , component , message) } fn log_info (component : & str , message : & str) { println ! ("{} {:?} {:?}" , "[INFO] {}: {}" , component , message) } fn process_user_data (user_id : i32 , data : & str) -> bool { log_info ("DataProcessor" , "Starting user data processing") ; if user_id <= 0i32 { { log_error ("DataProcessor" , "Invalid user ID provided") ; return false } } ; if data . len () == 0i32 { { log_error ("DataProcessor" , "Empty data received") ; return false } } ; if data . len () > 1000usize { { log_warning ("DataProcessor" , "Data size exceeds recommended limit") } } ; log_info ("DataProcessor" , "Processing data for user") ; if user_id == 999i32 { { log_error ("DataProcessor" , "Processing failed for user 999") ; return false } } ; log_info ("DataProcessor" , "Data processing completed successfully") ; return true } fn main () { let results = vec ! [process_user_data (123i32 , "valid_data") , process_user_data (0i32 , "invalid_user") , process_user_data (456i32 , "") , process_user_data (999i32 , "test_data")] ; let mut successful = 0i32 ; let mut i = 0i32 ; while i < 4i32 { { if results [i as usize] { { successful = successful + 1i32 } } ; i = i + 1i32 } } ; println ! ("") ; println ! ("{} {:?}" , "Summary: {}/4 operations successful" , successful) ; }
  |

error: aborting due to 2 previous errors; 2 warnings emitted

For more information about this error, try `rustc --explain E0308`.



=== ch16-00-testing-quality-assurance example 5 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0425]: cannot find function `add` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:36
  |
1 | fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" ,...
  |                                    ^^^ not found in this scope
  |
help: use the `.` operator to call the method `Add::add` on `i32`
  |
1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
1 + fn test_addition () { assert_eq ! (2i32.add(3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
  |

error[E0425]: cannot find function `add` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:103
  |
1 | fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" ,...
  |                                                                                                       ^^^ not found in this scope
  |
help: use the `.` operator to call the method `Add::add` on `i32`
  |
1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
1 + fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! ((- 1i32).add(1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
  |

error[E0425]: cannot find function `add` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:181
  |
1 | ...2 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests p...
  |                                                         ^^^ not found in this scope
  |
help: use the `.` operator to call the method `Add::add` on `i32`
  |
1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
1 + fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , "{}" , "Basic addition") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , "{}" , "Adding negative numbers") ; assert_eq ! (0i32.add(0i32) , 0i32 , "{}" , "Adding zeros") ; println ! ("✅ Addition tests pass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multiplication tests pass") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! ("🎉 Calculator test suite complete!") ; } fn main () { run_all_tests () }
  |

error[E0425]: cannot find function `multiply` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:314
  |
1 | ...ass") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , "{}" , "Basic multiplication") ; assert_eq ! (mult...
  |                                                       ^^^^^^^^ not found in this scope

error[E0425]: cannot find function `multiply` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:393
  |
1 | ...32 , "{}" , "Basic multiplication") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , "{}" , "Negative multiplication") ; assert_eq !...
  |                                                       ^^^^^^^^ not found in this scope

error[E0425]: cannot find function `multiply` in this scope
 --> /tmp/.tmpGtvklF/main.rs:1:478
  |
1 | ..., "{}" , "Negative multiplication") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , "{}" , "Multiply by zero") ; println ! ("✅ Multipl...
  |                                                       ^^^^^^^^ not found in this scope

error: aborting due to 6 previous errors

For more information about this error, try `rustc --explain E0425`.



=== ch16-00-testing-quality-assurance example 6 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
warning: unnecessary braces around block return value
 --> /tmp/.tmplwmzby/main.rs:1:48
  |
1 | fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_perfo...
  |                                                ^^ ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { let start_time = get_time_ms () ; let result = fibonacci (20i32) ; let end_time = get_time_ms () ; assert_eq ! (result , 6765i32 , "{}" , "Fibonacci(20) should equal 6765") ; let duration = end_time - start_time ; assert ! (duration < 1000i32 , "{}" , "Fibonacci(20) should complete within 1 second") ; println ! ("✅ Performance test passes") ; } fn main () { test_fibonacci_performance () }
1 + fn fibonacci (n : i32) -> i32 { if n <= 1i32 { n } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { let start_time = get_time_ms () ; let result = fibonacci (20i32) ; let end_time = get_time_ms () ; assert_eq ! (result , 6765i32 , "{}" , "Fibonacci(20) should equal 6765") ; let duration = end_time - start_time ; assert ! (duration < 1000i32 , "{}" , "Fibonacci(20) should complete within 1 second") ; println ! ("✅ Performance test passes") ; } fn main () { test_fibonacci_performance () }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmplwmzby/main.rs:1:63
  |
1 | fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_perfo...
  |                                                               ^^                                           ^^
  |
help: remove these braces
  |
1 - fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { let start_time = get_time_ms () ; let result = fibonacci (20i32) ; let end_time = get_time_ms () ; assert_eq ! (result , 6765i32 , "{}" , "Fibonacci(20) should equal 6765") ; let duration = end_time - start_time ; assert ! (duration < 1000i32 , "{}" , "Fibonacci(20) should complete within 1 second") ; println ! ("✅ Performance test passes") ; } fn main () { test_fibonacci_performance () }
1 + fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } fn test_fibonacci_performance () { let start_time = get_time_ms () ; let result = fibonacci (20i32) ; let end_time = get_time_ms () ; assert_eq ! (result , 6765i32 , "{}" , "Fibonacci(20) should equal 6765") ; let duration = end_time - start_time ; assert ! (duration < 1000i32 , "{}" , "Fibonacci(20) should complete within 1 second") ; println ! ("✅ Performance test passes") ; } fn main () { test_fibonacci_performance () }
  |

error[E0425]: cannot find function `get_time_ms` in this scope
 --> /tmp/.tmplwmzby/main.rs:1:167
  |
1 | ...test_fibonacci_performance () { let start_time = get_time_ms () ; let result = fibonacci (20i32) ; let end_time = get_time_ms () ; ass...
  |                                                     ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `get_time_ms` in this scope
 --> /tmp/.tmplwmzby/main.rs:1:232
  |
1 | ... let result = fibonacci (20i32) ; let end_time = get_time_ms () ; assert_eq ! (result , 6765i32 , "{}" , "Fibonacci(20) should equal 6...
  |                                                     ^^^^^^^^^^^ not found in this scope

error: aborting due to 2 previous errors; 2 warnings emitted

For more information about this error, try `rustc --explain E0425`.



=== ch16-00-testing-quality-assurance example 7 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error: expected one of `.`, `;`, `?`, `}`, or an operator, found `assert`
 --> /tmp/.tmpzajGki/main.rs:1:398
  |
1 | ..."{}" , "Descriptive failure message") assert ! (condition , "{}" , "Explain why this should be true") }
  |                                          ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator

error[E0425]: cannot find function `create_range` in this scope
 --> /tmp/.tmpzajGki/main.rs:1:42
  |
1 | fn test_range_function () { let result = create_range (1i32 , 5i32) ; assert_eq ! (len (result) , 4i32 , "{}" , "Range should have 4 elem...
  |                                          ^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `len` in this scope
 --> /tmp/.tmpzajGki/main.rs:1:84
  |
1 | fn test_range_function () { let result = create_range (1i32 , 5i32) ; assert_eq ! (len (result) , 4i32 , "{}" , "Range should have 4 elem...
  |                                                                                    ^^^ not found in this scope

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0425`.



=== ch03-00-functions-tdd example 10 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch03-00-functions-tdd example 11 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch05-00-control-flow-tdd example 15 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch05-00-control-flow-tdd example 16 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch05-00-control-flow-tdd example 17 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch04-00-practical-patterns-tdd example 2 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
error[E0106]: missing lifetime specifier
 --> /tmp/.tmp1VF12H/main.rs:1:489
  |
1 | ...n create_user_profile (name : & str , age : i32 , email : & str) -> & str { if validate_user_input (name , age , email) { { println ! ...
  |                                  -----                       -----     ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `name` or `email`
help: consider introducing a named lifetime parameter
  |
1 | fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0i32 { { println ! ("Error: Name cannot be empty") ; return false } } ; if age < 0i32 || age > 150i32 { { println ! ("Error: Age must be between 0 and 150") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format") ; return false } } ; println ! ("User input is valid") ; return true } fn create_user_profile<'a> (name : &'a  str , age : i32 , email : &'a  str) -> &'a  str { if validate_user_input (name , age , email) { { println ! ("{} {:?}" , "Creating profile for: {}" , name) ; return "Profile created successfully" } } else { { return "Profile creation failed" } } } fn main () { let result1 = create_user_profile ("Alice" , 25i32 , "alice@example.com") ; let result2 = create_user_profile ("" , 30i32 , "bob@example.com") ; let result3 = create_user_profile ("Charlie" , - 5i32 , "charlie@example.com") ; println ! ("{} {:?}" , "Result 1: {}" , result1) ; println ! ("{} {:?}" , "Result 2: {}" , result2) ; println ! ("{} {:?}" , "Result 3: {}" , result3) ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmp1VF12H/main.rs:1:654
  |
1 | ...return "Profile created successfully" } } else { { return "Profile creation failed" } } } fn main () { let result1 = create_user_profi...
  |                                                     ^^                                ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0i32 { { println ! ("Error: Name cannot be empty") ; return false } } ; if age < 0i32 || age > 150i32 { { println ! ("Error: Age must be between 0 and 150") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format") ; return false } } ; println ! ("User input is valid") ; return true } fn create_user_profile (name : & str , age : i32 , email : & str) -> & str { if validate_user_input (name , age , email) { { println ! ("{} {:?}" , "Creating profile for: {}" , name) ; return "Profile created successfully" } } else { { return "Profile creation failed" } } } fn main () { let result1 = create_user_profile ("Alice" , 25i32 , "alice@example.com") ; let result2 = create_user_profile ("" , 30i32 , "bob@example.com") ; let result3 = create_user_profile ("Charlie" , - 5i32 , "charlie@example.com") ; println ! ("{} {:?}" , "Result 1: {}" , result1) ; println ! ("{} {:?}" , "Result 2: {}" , result2) ; println ! ("{} {:?}" , "Result 3: {}" , result3) ; }
1 + fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0i32 { { println ! ("Error: Name cannot be empty") ; return false } } ; if age < 0i32 || age > 150i32 { { println ! ("Error: Age must be between 0 and 150") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format") ; return false } } ; println ! ("User input is valid") ; return true } fn create_user_profile (name : & str , age : i32 , email : & str) -> & str { if validate_user_input (name , age , email) { { println ! ("{} {:?}" , "Creating profile for: {}" , name) ; return "Profile created successfully" } } else { return "Profile creation failed" } } fn main () { let result1 = create_user_profile ("Alice" , 25i32 , "alice@example.com") ; let result2 = create_user_profile ("" , 30i32 , "bob@example.com") ; let result3 = create_user_profile ("Charlie" , - 5i32 , "charlie@example.com") ; println ! ("{} {:?}" , "Result 1: {}" , result1) ; println ! ("{} {:?}" , "Result 2: {}" , result2) ; println ! ("{} {:?}" , "Result 3: {}" , result3) ; }
  |

error[E0308]: mismatched types
 --> /tmp/.tmp1VF12H/main.rs:1:97
  |
1 | fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0i32 { { println ! ("Error: Name cannot b...
  |                                                                                -------------    ^^^^ expected `usize`, found `i32`
  |                                                                                |
  |                                                                                expected because this is `usize`
  |
help: change the type of the numeric literal from `i32` to `usize`
  |
1 - fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0i32 { { println ! ("Error: Name cannot be empty") ; return false } } ; if age < 0i32 || age > 150i32 { { println ! ("Error: Age must be between 0 and 150") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format") ; return false } } ; println ! ("User input is valid") ; return true } fn create_user_profile (name : & str , age : i32 , email : & str) -> & str { if validate_user_input (name , age , email) { { println ! ("{} {:?}" , "Creating profile for: {}" , name) ; return "Profile created successfully" } } else { { return "Profile creation failed" } } } fn main () { let result1 = create_user_profile ("Alice" , 25i32 , "alice@example.com") ; let result2 = create_user_profile ("" , 30i32 , "bob@example.com") ; let result3 = create_user_profile ("Charlie" , - 5i32 , "charlie@example.com") ; println ! ("{} {:?}" , "Result 1: {}" , result1) ; println ! ("{} {:?}" , "Result 2: {}" , result2) ; println ! ("{} {:?}" , "Result 3: {}" , result3) ; }
1 + fn validate_user_input (name : & str , age : i32 , email : & str) -> bool { if name . len () == 0usize { { println ! ("Error: Name cannot be empty") ; return false } } ; if age < 0i32 || age > 150i32 { { println ! ("Error: Age must be between 0 and 150") ; return false } } ; if ! email . contains ('@') { { println ! ("Error: Invalid email format") ; return false } } ; println ! ("User input is valid") ; return true } fn create_user_profile (name : & str , age : i32 , email : & str) -> & str { if validate_user_input (name , age , email) { { println ! ("{} {:?}" , "Creating profile for: {}" , name) ; return "Profile created successfully" } } else { { return "Profile creation failed" } } } fn main () { let result1 = create_user_profile ("Alice" , 25i32 , "alice@example.com") ; let result2 = create_user_profile ("" , 30i32 , "bob@example.com") ; let result3 = create_user_profile ("Charlie" , - 5i32 , "charlie@example.com") ; println ! ("{} {:?}" , "Result 1: {}" , result1) ; println ! ("{} {:?}" , "Result 2: {}" , result2) ; println ! ("{} {:?}" , "Result 3: {}" , result3) ; }
  |

error: aborting due to 2 previous errors; 1 warning emitted

Some errors have detailed explanations: E0106, E0308.
For more information about an error, try `rustc --explain E0106`.



=== ch04-00-practical-patterns-tdd example 5 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch04-00-practical-patterns-tdd example 6 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch04-00-practical-patterns-tdd example 8 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch04-00-practical-patterns-tdd example 10 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch15-00-binary-compilation-deployment example 2 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch15-00-binary-compilation-deployment example 3 ===
DEBUG: About to call transpile_to_program
✗ Compilation failed: Failed to parse Ruchy source


=== ch15-00-binary-compilation-deployment example 4 ===
DEBUG: About to call transpile_to_program
DEBUG: transpile_to_program completed
✗ Compilation failed: Compilation failed:
warning: unnecessary braces around block return value
 --> /tmp/.tmpUCdUfD/main.rs:1:48
  |
1 | fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i...
  |                                                ^^    ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
1 - fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
1 + fn factorial (n : i32) -> i64 { if n <= 1i32 { 1i32 } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |

warning: unnecessary braces around block return value
 --> /tmp/.tmpUCdUfD/main.rs:1:66
  |
1 | fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i...
  |                                                                  ^^                                 ^^
  |
help: remove these braces
  |
1 - fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
1 + fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { (n as i64) * factorial (n - 1i32) } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |

warning: unnecessary trailing semicolon
 --> /tmp/.tmpUCdUfD/main.rs:1:197
  |
1 | ... n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } ...
  |                                                        ^ help: remove this semicolon
  |
  = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
 --> /tmp/.tmpUCdUfD/main.rs:1:221
  |
1 | ... } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 ...
  |                                                        ^ help: remove this semicolon

warning: unnecessary braces around block return value
 --> /tmp/.tmpUCdUfD/main.rs:1:157
  |
1 | ...1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x...
  |                                                                 ^^        ^^
  |
help: remove these braces
  |
1 - fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
1 + fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { return n } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |

warning: unnecessary trailing semicolon
 --> /tmp/.tmpUCdUfD/main.rs:1:756
  |
1 | ..." , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |                                                        ^ help: remove this semicolon

error[E0308]: mismatched types
 --> /tmp/.tmpUCdUfD/main.rs:1:50
  |
1 | fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i...
  |                           ---                    ^^^^ expected `i64`, found `i32`
  |                           |
  |                           expected `i64` because of return type
  |
help: change the type of the numeric literal from `i32` to `i64`
  |
1 - fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
1 + fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i64 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |

error[E0384]: cannot assign to immutable argument `b`
 --> /tmp/.tmpUCdUfD/main.rs:1:358
  |
1 | ...-> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; ...
  |                                                ^^^^^^^^^ cannot assign to immutable argument
  |
help: consider making this binding mutable
  |
1 | fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (a : i32 , mut b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |                                                                                                                                                                                                                                                                                                                 +++

error[E0384]: cannot assign to immutable argument `a`
 --> /tmp/.tmpUCdUfD/main.rs:1:370
  |
1 | ...ile b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i...
  |                                                 ^^^^^^^^ cannot assign to immutable argument
  |
help: consider making this binding mutable
  |
1 | fn factorial (n : i32) -> i64 { if n <= 1i32 { { 1i32 } } else { { (n as i64) * factorial (n - 1i32) } } } fn integer_sqrt (n : i32) -> i32 { if n < 2i32 { { return n } } ; let mut x = n / 2i32 ; ; let mut prev = 0i32 ; ; while x != prev { { prev = x ; x = (x + n / x) / 2i32 } } ; x } fn gcd (mut a : i32 , b : i32) -> i32 { while b != 0i32 { { let temp = b ; b = a % b ; a = temp ; } } ; a } fn main () { println ! ("Mathematical Functions Demo") ; let n = 10i32 ; println ! ("{} {:?} {:?}" , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b , gcd (a , b)) ; ; }
  |                                                                                                                                                                                                                                                                                                       +++

warning: variable does not need to be mutable
 --> /tmp/.tmpUCdUfD/main.rs:1:541
  |
1 | ..." , "Factorial of {}: {}" , n , factorial (n)) ; let mut x = 25i32 ; println ! ("{} {:?} {:?}" , "Square root of {}: {}" , x , integer...
  |                                                         ----^
  |                                                         |
  |                                                         help: remove this `mut`
  |
  = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
 --> /tmp/.tmpUCdUfD/main.rs:1:639
  |
1 | ...Square root of {}: {}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} a...
  |                                                         ----^
  |                                                         |
  |                                                         help: remove this `mut`

warning: variable does not need to be mutable
 --> /tmp/.tmpUCdUfD/main.rs:1:659
  |
1 | ...}" , x , integer_sqrt (x)) ; let mut a = 48i32 ; let mut b = 18i32 ; println ! ("{} {:?} {:?} {:?}" , "GCD of {} and {}: {}" , a , b ,...
  |                                                         ----^
  |                                                         |
  |                                                         help: remove this `mut`

error: aborting due to 3 previous errors; 9 warnings emitted

Some errors have detailed explanations: E0308, E0384.
For more information about an error, try `rustc --explain E0308`.


