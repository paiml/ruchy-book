// SQL-like macro
macro! sql {
    (SELECT $($field:ident),* FROM $table:ident WHERE $($cond:tt)*) => {
        Query::select(vec![$(stringify!($field)),*])
            .from(stringify!($table))
            .where(parse_condition!($($cond)*))
    }
}

let query = sql! {
    SELECT name, email, age 
    FROM users 
    WHERE age > 18 AND active = true
}

// HTML templating
macro! html {
    (<$tag:ident $($attr:ident = $value:expr)*> $($content:tt)* </$close:ident>) => {
        Element::new(stringify!($tag))
            $(.attr(stringify!($attr), $value))*
            .children(vec![$(html!($content)),*])
    }
    ($text:expr) => {
        Text::new($text)
    }
}

let page = html! {
    <div class="container">
        <h1>"Welcome"</h1>
        <p>"This is "<strong>"Ruchy"</strong>" macros!"</p>
    </div>
}

// Regular expression literals
macro! regex {
    ($pattern:expr) => {
        {
            static REGEX: OnceCell<Regex> = OnceCell::new()
            REGEX.get_or_init(|| {
                Regex::new($pattern).expect("Invalid regex")
            })
        }
    }
}

let email_regex = regex!(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")