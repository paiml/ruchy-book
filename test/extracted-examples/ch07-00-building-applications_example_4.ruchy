fn safe_operation(operation_fn, fallback_value) {
    try {
        return operation_fn()
    } catch error {
        log_error(error)
        return fallback_value
    }
}

fn with_retry(operation_fn, max_attempts = 3) {
    for attempt in range(max_attempts) {
        try {
            return operation_fn()
        } catch error {
            if attempt == max_attempts - 1 {
                println(f"❌ Failed after {max_attempts} attempts: {error}")
                throw error
            }
            
            let wait_time = 2 ** attempt  // Exponential backoff
            println(f"⚠️  Attempt {attempt + 1} failed, retrying in {wait_time}s...")
            sleep(wait_time * 1000)
        }
    }
}