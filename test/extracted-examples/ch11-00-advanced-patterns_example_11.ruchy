// Actor system
class Actor {
    let mailbox = Queue::new()
    let running = true
    
    fn receive(message) {
        mailbox.push(message)
    }
    
    fn start() {
        spawn {
            while running {
                let message = mailbox.pop()
                if message {
                    handle_message(message)
                }
                sleep(1)
            }
        }
    }
    
    fn handle_message(message) {
        // Override in subclass
    }
}

// Concrete actor
class WorkerActor < Actor {
    let state = {}
    
    fn handle_message(message) {
        match message.type {
            "process" => {
                let result = process_work(message.data)
                message.reply_to.receive({
                    type: "result",
                    data: result
                })
            }
            "get_state" => {
                message.reply_to.receive({
                    type: "state",
                    data: state
                })
            }
            "shutdown" => {
                running = false
            }
        }
    }
}

// Actor system
let system = ActorSystem::new()
let worker = system.spawn(WorkerActor)

worker.send({
    type: "process",
    data: work_item,
    reply_to: self
})