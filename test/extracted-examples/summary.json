{
  "timestamp": "2025-09-02T17:57:29.807Z",
  "ruchy_version": "ruchy 1.35.0",
  "chapters_processed": 12,
  "examples_found": 81,
  "examples_working": 73,
  "examples_failing": 8,
  "success_rate": 90,
  "chapters": {
    "ch02-00-variables-types-tdd": {
      "chapter": "ch02-00-variables-types-tdd",
      "total_examples": 8,
      "working_examples": 8,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun main() {\n    let x = 42;\n    println(x);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 2,
          "line_number": 51,
          "code": "fun main() {\n    let name = \"Ruchy\";\n    println(name);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 3,
          "line_number": 70,
          "code": "fun main() {\n    let x = 10;\n    let y = 20;\n    let sum = x + y;\n    println(sum);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 4,
          "line_number": 91,
          "code": "fun main() {\n    let pi = 3.14159;\n    let radius = 5.0;\n    let area = pi * radius * radius;\n    println(area);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 5,
          "line_number": 136,
          "code": "fun main() {\n    let outer = 100;\n    // outer is accessible here\n    println(outer);\n}\n// outer is NOT accessible here",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 6,
          "line_number": 163,
          "code": "fun main() {\n    let value1 = 10;\n    let value2 = 20;\n    let result = value1 + value2;\n    println(result);  // Output: 30\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 7,
          "line_number": 173,
          "code": "fun main() {\n    let initial_value = 100;\n    let factor = 2;\n    let adjustment = 50;\n    let divisor = 3;\n    \n    let step1 = initial_value * factor;\n    let step2 = step1 + adjustment;\n    let final_result = step2 / divisor;\n    \n    println(final_result);  // Output: 83\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch02-00-variables-types-tdd.md",
          "example_number": 8,
          "line_number": 189,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet PI = 3.14159;\nlet GRAVITY = 9.81;",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch21-00-professional-tooling-tdd": {
      "chapter": "ch21-00-professional-tooling-tdd",
      "total_examples": 1,
      "working_examples": 1,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch21-00-professional-tooling-tdd.md",
          "example_number": 1,
          "line_number": 23,
          "code": "// test/tooling/simple_test.ruchy - ✓ VERIFIED WORKING\nfun add(a: i32, b: i32) -> i32 {\n    a + b\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "conclusion": {
      "chapter": "conclusion",
      "total_examples": 1,
      "working_examples": 1,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/conclusion.md",
          "example_number": 1,
          "line_number": 205,
          "code": "fun calculate(x: i32, y: i32) -> i32 {\n    return x + y;\n}\n\nfun main() {\n    let result = calculate(10, 20);\n    println(result);  // Output: 30\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch14-00-toolchain-mastery-tdd": {
      "chapter": "ch14-00-toolchain-mastery-tdd",
      "total_examples": 4,
      "working_examples": 3,
      "failing_examples": 1,
      "examples": [
        {
          "file": "src/ch14-00-toolchain-mastery-tdd.md",
          "example_number": 1,
          "line_number": 20,
          "code": "fun greet(name: String) -> String {\n    \"Hello, \" + name + \"!\"\n}\n\nfun main() {\n    let message = greet(\"Ruchy Developer\");\n    println(message);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch14-00-toolchain-mastery-tdd.md",
          "example_number": 2,
          "line_number": 56,
          "code": "// calculator_test.ruchy\nfun add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\nfun test_addition() {\n    let result = add(2, 3);\n    assert_eq(result, 5);\n    println(\"Addition test passed\");\n}\n\nfun main() {\n    test_addition();\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch14-00-toolchain-mastery-tdd.md",
          "example_number": 3,
          "line_number": 121,
          "code": "fun calculate_factorial(n: i32) -> i32 {\n    if n <= 1 {\n        1\n    } else {\n        n * calculate_factorial(n - 1)\n    }\n}\n\nfun main() {\n    let result = calculate_factorial(10);\n    println(result);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch14-00-toolchain-mastery-tdd.md",
          "example_number": 4,
          "line_number": 258,
          "code": "fun fibonacci_recursive(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n    }\n}\n\nfun fibonacci_iterative(n: i32) -> i32 {\n    let mut a = 0;\n    let mut b = 1;\n    let mut i = 0;\n    \n    while i < n {\n        let temp = a + b;\n        a = b;\n        b = temp;\n        i = i + 1;\n    }\n    \n    a\n}\n\nfun main() {\n    let result1 = fibonacci_recursive(10);\n    let result2 = fibonacci_iterative(10);\n    println(result1);\n    println(result2);\n}",
          "passed": false,
          "status": "broken",
          "error": "DEBUG: About to call transpile_to_program\nDEBUG: transpile_to_program completed\n✗ Compilation failed: Compilation failed:\nwarning: unnecessary braces around block return value\n --> /tmp/.tmpOYWstQ/main.rs:1:58\n  |\n1 | fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32)...\n  |                                                          ^^ ^^\n  |\n  = note: `#[warn(unused_braces)]` on by default\nhelp: remove these braces\n  |\n1 - fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n1 + fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { n } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n  |\n\nwarning: unnecessary braces around block return value\n --> /tmp/.tmpOYWstQ/main.rs:1:73\n  |\n1 | ... { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i...\n  |                                     ^^                                                               ^^\n  |\nhelp: remove these braces\n  |\n1 - fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n1 + fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n  |\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpOYWstQ/main.rs:1:206\n  |\n1 | ...cci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; {...\n  |                                                        ^ help: remove this semicolon\n  |\n  = note: `#[warn(redundant_semicolons)]` on by default\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpOYWstQ/main.rs:1:227\n  |\n1 | ...2) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i...\n  |                                                        ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpOYWstQ/main.rs:1:248\n  |\n1 | ... = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ;...\n  |                                                        ^ help: remove this semicolon\n\nwarning: unnecessary braces around block return value\n --> /tmp/.tmpOYWstQ/main.rs:1:264\n  |\n1 | ... let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result...\n  |                                        ^^                                                          ^^\n  |\nhelp: remove these braces\n  |\n1 - fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n1 + fn fibonacci_recursive (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci_recursive (n - 1i32) + fibonacci_recursive (n - 2i32) } } } fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } ; a ; } fn main () { { let result1 = fibonacci_recursive (10i32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n  |\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpOYWstQ/main.rs:1:442\n  |\n1 | ...32) ; { let result2 = fibonacci_iterative (10i32) ; ; println ! (\"{:?}\" , result1) ; println ! (\"{:?}\" , result2) } } }\n  |                                                        ^ help: remove this semicolon\n\nerror[E0308]: mismatched types\n --> /tmp/.tmpOYWstQ/main.rs:1:181\n  |\n1 | ...fn fibonacci_iterative (n : i32) -> i32 { let mut a = 0i32 ; ; let mut b = 1i32 ; ; let mut i = 0i32 ; ; while i < n { { { let temp = a + b ; { a = b ; b = temp ; i = i + 1i32 } } } } ; a ; } ...\n  |       -------------------              ^^^ expected `i32`, found `()`                                                                                                                          - help: remove this semicolon to return this value\n  |       |\n  |       implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 1 previous error; 7 warnings emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        }
      ]
    },
    "ch10-00-input-output-tdd": {
      "chapter": "ch10-00-input-output-tdd",
      "total_examples": 10,
      "working_examples": 10,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun main() {\n    println(\"=== Output Demo ===\");\n    println(\"Number: \");\n    println(42);\n    println(\"Boolean: \");\n    println(true);\n    println(\"=== End Demo ===\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 2,
          "line_number": 60,
          "code": "fun main() {\n    let name = \"Alice\";\n    let age = 30;\n    let height = 5.6;\n    \n    println(\"=== User Profile ===\");\n    println(\"Name:\");\n    println(name);\n    println(\"Age:\");\n    println(age);\n    println(\"Height:\");\n    println(height);\n    println(\"================\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 3,
          "line_number": 96,
          "code": "fun display_menu() {\n    println(\"=== Main Menu ===\");\n    println(\"1. View Profile\");\n    println(\"2. Settings\");\n    println(\"3. Exit\");\n    println(\"=================\");\n}\n\nfun main() {\n    display_menu();\n    println(\"Menu displayed successfully\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 4,
          "line_number": 147,
          "code": "fun main() {\n    let variable = \"Hello World\";\n    println(\"text message\");\n    println(variable);\n    println(42);\n    println(true);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 5,
          "line_number": 158,
          "code": "fun main() {\n    let value = \"Important Data\";\n    let data = value;\n    println(\"Label:\");\n    println(data);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 6,
          "line_number": 168,
          "code": "fun display_options() {\n    println(\"=== Menu ===\");\n    println(\"1. Option One\");\n    println(\"2. Option Two\");\n    println(\"============\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 7,
          "line_number": 195,
          "code": "let value = 100;\nprintln(\"Result:\");\nprintln(value);",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 8,
          "line_number": 205,
          "code": "// Error: ✗ Compilation failed: Failed to parse Ruchy source\nfun display_report(title: &str, data: i32) {\n    println(\"=== Report ===\");\n    println(title);\n    println(data);\n    println(\"==============\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 9,
          "line_number": 218,
          "code": "println(\"Processing...\");\n// ... do work ...\nprintln(\"Complete!\");",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch10-00-input-output-tdd.md",
          "example_number": 10,
          "line_number": 228,
          "code": "fun show_options() {\n    println(\"Choose an option:\");\n    println(\"1. Start\");\n    println(\"2. Stop\");\n    println(\"3. Help\");\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch16-00-testing-quality-assurance": {
      "chapter": "ch16-00-testing-quality-assurance",
      "total_examples": 8,
      "working_examples": 4,
      "failing_examples": 4,
      "examples": [
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 1,
          "line_number": 9,
          "code": "fun add_numbers(a: i32, b: i32) -> i32 {\n    a + b\n}\n\nfun main() {\n    // Basic functionality test\n    let result = add_numbers(5, 3);\n    assert_eq(result, 8, \"Addition should work correctly\");\n    \n    println(\"✅ All tests passed!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 2,
          "line_number": 48,
          "code": "fun factorial(n: i32) -> i32 {\n    if n <= 1 {\n        1\n    } else {\n        n * factorial(n - 1)\n    }\n}\n\nfun test_factorial_base_cases() {\n    assert_eq(factorial(0), 1, \"0! should equal 1\");\n    assert_eq(factorial(1), 1, \"1! should equal 1\");\n    println(\"✅ Base cases pass\");\n}\n\nfun test_factorial_recursive_cases() {\n    assert_eq(factorial(3), 6, \"3! should equal 6\");\n    assert_eq(factorial(4), 24, \"4! should equal 24\");\n    assert_eq(factorial(5), 120, \"5! should equal 120\");\n    println(\"✅ Recursive cases pass\");\n}\n\nfun main() {\n    test_factorial_base_cases();\n    test_factorial_recursive_cases();\n    println(\"🎉 All factorial tests passed!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 3,
          "line_number": 78,
          "code": "fun safe_divide(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        println(\"Error: Division by zero\");\n        return 0;\n    }\n    a / b\n}\n\nfun test_division_normal_cases() {\n    assert_eq(safe_divide(10, 2), 5, \"Normal division should work\");\n    assert_eq(safe_divide(15, 3), 5, \"Another normal case\");\n    println(\"✅ Normal division tests pass\");\n}\n\nfun test_division_error_cases() {\n    // Test division by zero handling\n    let result = safe_divide(10, 0);\n    assert_eq(result, 0, \"Division by zero should return 0\");\n    println(\"✅ Error handling tests pass\");\n}\n\nfun main() {\n    test_division_normal_cases();\n    test_division_error_cases();\n    println(\"🎉 All division tests passed!\");\n}",
          "passed": false,
          "status": "broken",
          "error": "DEBUG: About to call transpile_to_program\nDEBUG: transpile_to_program completed\n✗ Compilation failed: Compilation failed:\nerror[E0308]: mismatched types\n --> /tmp/.tmp5Awrhp/main.rs:1:39\n  |\n1 | fn safe_divide (a : i32 , b : i32) -> i32 { if b == 0i32 { { println ! (\"Error: Division by zero\") ; return 0i32 } } ; a / b ; } fn test_...\n  |    -----------                        ^^^ expected `i32`, found `()`                                                         - help: remove this semicolon to return this value\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 4,
          "line_number": 108,
          "code": "fun absolute_value(x: i32) -> i32 {\n    if x < 0 {\n        -x\n    } else {\n        x\n    }\n}\n\nfun test_absolute_value_properties() {\n    // Property: abs(x) >= 0 for all x\n    let test_values = [5, -3, 0, 100, -50];\n    let mut i = 0;\n    \n    while i < 5 {\n        let x = test_values[i];\n        let abs_x = absolute_value(x);\n        \n        // Property 1: Result is always non-negative\n        assert(abs_x >= 0, \"Absolute value must be non-negative\");\n        \n        // Property 2: abs(abs(x)) == abs(x) (idempotent)\n        assert_eq(absolute_value(abs_x), abs_x, \"Absolute value should be idempotent\");\n        \n        i = i + 1;\n    }\n    \n    println(\"✅ Property tests pass\");\n}\n\nfun main() {\n    test_absolute_value_properties();\n    println(\"🎉 All property tests passed!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 5,
          "line_number": 230,
          "code": "// File: calculator_test.ruchy\nfun test_addition() {\n    assert_eq(add(2, 3), 5, \"Basic addition\");\n    assert_eq(add(-1, 1), 0, \"Adding negative numbers\");\n    assert_eq(add(0, 0), 0, \"Adding zeros\");\n    println(\"✅ Addition tests pass\");\n}\n\nfun test_multiplication() {\n    assert_eq(multiply(3, 4), 12, \"Basic multiplication\");\n    assert_eq(multiply(-2, 3), -6, \"Negative multiplication\");\n    assert_eq(multiply(0, 100), 0, \"Multiply by zero\");\n    println(\"✅ Multiplication tests pass\");\n}\n\nfun run_all_tests() {\n    test_addition();\n    test_multiplication();\n    println(\"🎉 Calculator test suite complete!\");\n}\n\nfun main() {\n    run_all_tests();\n}",
          "passed": false,
          "status": "broken",
          "error": "DEBUG: About to call transpile_to_program\nDEBUG: transpile_to_program completed\n✗ Compilation failed: Compilation failed:\nerror[E0425]: cannot find function `add` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:36\n  |\n1 | fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" ,...\n  |                                    ^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `Add::add` on `i32`\n  |\n1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n1 + fn test_addition () { assert_eq ! (2i32.add(3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n  |\n\nerror[E0425]: cannot find function `add` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:103\n  |\n1 | fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" ,...\n  |                                                                                                       ^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `Add::add` on `i32`\n  |\n1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n1 + fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! ((- 1i32).add(1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n  |\n\nerror[E0425]: cannot find function `add` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:181\n  |\n1 | ...2 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests p...\n  |                                                         ^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `Add::add` on `i32`\n  |\n1 - fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (add (0i32 , 0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n1 + fn test_addition () { assert_eq ! (add (2i32 , 3i32) , 5i32 , \"{}\" , \"Basic addition\") ; assert_eq ! (add (- 1i32 , 1i32) , 0i32 , \"{}\" , \"Adding negative numbers\") ; assert_eq ! (0i32.add(0i32) , 0i32 , \"{}\" , \"Adding zeros\") ; println ! (\"✅ Addition tests pass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multiplication tests pass\") ; } fn run_all_tests () { test_addition () ; test_multiplication () ; println ! (\"🎉 Calculator test suite complete!\") ; } fn main () { run_all_tests () }\n  |\n\nerror[E0425]: cannot find function `multiply` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:314\n  |\n1 | ...ass\") ; } fn test_multiplication () { assert_eq ! (multiply (3i32 , 4i32) , 12i32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (mult...\n  |                                                       ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `multiply` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:393\n  |\n1 | ...32 , \"{}\" , \"Basic multiplication\") ; assert_eq ! (multiply (- 2i32 , 3i32) , - 6i32 , \"{}\" , \"Negative multiplication\") ; assert_eq !...\n  |                                                       ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `multiply` in this scope\n --> /tmp/.tmp3f9Nbb/main.rs:1:478\n  |\n1 | ..., \"{}\" , \"Negative multiplication\") ; assert_eq ! (multiply (0i32 , 100i32) , 0i32 , \"{}\" , \"Multiply by zero\") ; println ! (\"✅ Multipl...\n  |                                                       ^^^^^^^^ not found in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 6,
          "line_number": 258,
          "code": "fun fibonacci(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nfun test_fibonacci_performance() {\n    // Test reasonable performance expectations\n    let start_time = get_time_ms(); // Placeholder - actual timing would need stdlib\n    let result = fibonacci(20);\n    let end_time = get_time_ms();\n    \n    assert_eq(result, 6765, \"Fibonacci(20) should equal 6765\");\n    \n    // Performance assertion (conceptual)\n    let duration = end_time - start_time;\n    assert(duration < 1000, \"Fibonacci(20) should complete within 1 second\");\n    \n    println(\"✅ Performance test passes\");\n}\n\nfun main() {\n    test_fibonacci_performance();\n}",
          "passed": false,
          "status": "broken",
          "error": "DEBUG: About to call transpile_to_program\nDEBUG: transpile_to_program completed\n✗ Compilation failed: Compilation failed:\nwarning: unnecessary braces around block return value\n --> /tmp/.tmpytBwLd/main.rs:1:48\n  |\n1 | fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_perfo...\n  |                                                ^^ ^^\n  |\n  = note: `#[warn(unused_braces)]` on by default\nhelp: remove these braces\n  |\n1 - fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { { let start_time = get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal 6765\") ; let duration = end_time - start_time ; ; assert ! (duration < 1000i32 , \"{}\" , \"Fibonacci(20) should complete within 1 second\") ; println ! (\"✅ Performance test passes\") } } } fn main () { test_fibonacci_performance () }\n1 + fn fibonacci (n : i32) -> i32 { if n <= 1i32 { n } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { { let start_time = get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal 6765\") ; let duration = end_time - start_time ; ; assert ! (duration < 1000i32 , \"{}\" , \"Fibonacci(20) should complete within 1 second\") ; println ! (\"✅ Performance test passes\") } } } fn main () { test_fibonacci_performance () }\n  |\n\nwarning: unnecessary braces around block return value\n --> /tmp/.tmpytBwLd/main.rs:1:63\n  |\n1 | fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_perfo...\n  |                                                               ^^                                           ^^\n  |\nhelp: remove these braces\n  |\n1 - fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } } fn test_fibonacci_performance () { { let start_time = get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal 6765\") ; let duration = end_time - start_time ; ; assert ! (duration < 1000i32 , \"{}\" , \"Fibonacci(20) should complete within 1 second\") ; println ! (\"✅ Performance test passes\") } } } fn main () { test_fibonacci_performance () }\n1 + fn fibonacci (n : i32) -> i32 { if n <= 1i32 { { n } } else { fibonacci (n - 1i32) + fibonacci (n - 2i32) } } fn test_fibonacci_performance () { { let start_time = get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal 6765\") ; let duration = end_time - start_time ; ; assert ! (duration < 1000i32 , \"{}\" , \"Fibonacci(20) should complete within 1 second\") ; println ! (\"✅ Performance test passes\") } } } fn main () { test_fibonacci_performance () }\n  |\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpytBwLd/main.rs:1:221\n  |\n1 | ...get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibona...\n  |                                                        ^ help: remove this semicolon\n  |\n  = note: `#[warn(redundant_semicolons)]` on by default\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpytBwLd/main.rs:1:255\n  |\n1 | ...bonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal 6765\") ; let ...\n  |                                                        ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n --> /tmp/.tmpytBwLd/main.rs:1:372\n  |\n1 | ...ual 6765\") ; let duration = end_time - start_time ; ; assert ! (duration < 1000i32 , \"{}\" , \"Fibonacci(20) should complete within 1 se...\n  |                                                        ^ help: remove this semicolon\n\nerror[E0425]: cannot find function `get_time_ms` in this scope\n --> /tmp/.tmpytBwLd/main.rs:1:169\n  |\n1 | ...st_fibonacci_performance () { { let start_time = get_time_ms () ; { let result = fibonacci (20i32) ; ; let end_time = get_time_ms () ;...\n  |                                                     ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `get_time_ms` in this scope\n --> /tmp/.tmpytBwLd/main.rs:1:238\n  |\n1 | ...et result = fibonacci (20i32) ; ; let end_time = get_time_ms () ; ; assert_eq ! (result , 6765i32 , \"{}\" , \"Fibonacci(20) should equal...\n  |                                                     ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors; 5 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 7,
          "line_number": 352,
          "code": "// Clear, specific assertions\nassert_eq(actual, expected, \"Descriptive failure message\");\n\n// Boolean assertions with context\nassert(condition, \"Explain why this should be true\");\n\n// Multiple related assertions\nfun test_range_function() {\n    let result = create_range(1, 5);\n    assert_eq(len(result), 4, \"Range should have 4 elements\");\n    assert_eq(result[0], 1, \"First element should be 1\");  \n    assert_eq(result[3], 4, \"Last element should be 4\");\n}",
          "passed": false,
          "status": "broken",
          "error": "DEBUG: About to call transpile_to_program\nDEBUG: transpile_to_program completed\n✗ Compilation failed: Compilation failed:\nerror[E0425]: cannot find value `actual` in this scope\n --> /tmp/.tmpeQtUrp/main.rs:1:346\n  |\n1 | ...ement should be 4\") } } } fn main () { assert_eq ! (actual , expected , \"{}\" , \"Descriptive failure message\") ; assert ! (condition , ...\n  |                                                        ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `expected` in this scope\n --> /tmp/.tmpeQtUrp/main.rs:1:355\n  |\n1 | ...ld be 4\") } } } fn main () { assert_eq ! (actual , expected , \"{}\" , \"Descriptive failure message\") ; assert ! (condition , \"{}\" , \"Ex...\n  |                                                       ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `condition` in this scope\n --> /tmp/.tmpeQtUrp/main.rs:1:416\n  |\n1 | ...\"{}\" , \"Descriptive failure message\") ; assert ! (condition , \"{}\" , \"Explain why this should be true\") ; }\n  |                                                      ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `create_range` in this scope\n --> /tmp/.tmpeQtUrp/main.rs:1:44\n  |\n1 | fn test_range_function () { { let result = create_range (1i32 , 5i32) ; { assert_eq ! (len (result) , 4i32 , \"{}\" , \"Range should have 4 ...\n  |                                            ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/.tmpeQtUrp/main.rs:1:88\n  |\n1 | fn test_range_function () { { let result = create_range (1i32 , 5i32) ; { assert_eq ! (len (result) , 4i32 , \"{}\" , \"Range should have 4 ...\n  |                                                                                        ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch16-00-testing-quality-assurance.md",
          "example_number": 8,
          "line_number": 377,
          "code": "fun gcd(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        gcd(b, a % b)\n    }\n}\n\n// Property: gcd(a, b) divides both a and b\nfun test_gcd_properties() {\n    let a = 48;\n    let b = 18;\n    let result = gcd(a, b);\n    \n    // Property verification\n    assert_eq(a % result, 0, \"GCD should divide first number\");\n    assert_eq(b % result, 0, \"GCD should divide second number\");\n    assert_eq(result, 6, \"GCD(48, 18) should equal 6\");\n    \n    println(\"✅ GCD properties verified\");\n}\n\nfun main() {\n    test_gcd_properties();\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch03-00-functions-tdd": {
      "chapter": "ch03-00-functions-tdd",
      "total_examples": 9,
      "working_examples": 9,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun greet() {\n    println(\"Hello from function!\");\n}\n\nfun main() {\n    greet();\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 2,
          "line_number": 54,
          "code": "fun add(a, b) {\n    a + b\n}\n\nfun main() {\n    let result = add(5, 3);\n    println(result);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 3,
          "line_number": 77,
          "code": "fun multiply(x: i32, y: i32) -> i32 {\n    x * y\n}\n\nfun main() {\n    let product = multiply(6, 7);\n    println(product);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 4,
          "line_number": 100,
          "code": "fun square(n: i32) -> i32 {\n    n * n\n}\n\nfun sum_of_squares(a: i32, b: i32) -> i32 {\n    square(a) + square(b)\n}\n\nfun main() {\n    let result = sum_of_squares(3, 4);\n    println(result);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 5,
          "line_number": 127,
          "code": "// Example function definition\nfun calculate_area(length: i32, width: i32) -> i32 {\n    length * width\n}\n\nfun main() {\n    let area = calculate_area(5, 3);\n    println(area);  // Output: 15\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 6,
          "line_number": 167,
          "code": "fun calculate(x: i32, y: i32) -> i32 {\n    x * 2 + y * 3\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 7,
          "line_number": 196,
          "code": "fun calculate(input: i32) -> i32 {\n    input * 2\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 8,
          "line_number": 206,
          "code": "fun combine(a: i32, b: i32, c: i32) -> i32 {\n    a + b + c\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch03-00-functions-tdd.md",
          "example_number": 9,
          "line_number": 216,
          "code": "fun helper(x: i32) -> i32 {\n    x * x\n}\n\nfun main_calculation(n: i32) -> i32 {\n    helper(n) + helper(n + 1)\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch05-00-control-flow-tdd": {
      "chapter": "ch05-00-control-flow-tdd",
      "total_examples": 14,
      "working_examples": 14,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun main() {\n    let x = 10;\n    if x > 5 {\n        println(\"x is greater than 5\");\n    } else {\n        println(\"x is not greater than 5\");\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 2,
          "line_number": 55,
          "code": "fun main() {\n    let score = 85;\n    if score >= 80 {\n        println(\"Great job!\");\n    }\n    println(\"Score processed\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 3,
          "line_number": 78,
          "code": "fun main() {\n    let grade = 75;\n    if grade >= 90 {\n        println(\"A grade\");\n    } else if grade >= 80 {\n        println(\"B grade\");\n    } else if grade >= 70 {\n        println(\"C grade\");\n    } else {\n        println(\"Below C\");\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 4,
          "line_number": 105,
          "code": "fun main() {\n    let mut i = 0;\n    while i < 3 {\n        println(i);\n        i = i + 1;\n    }\n    println(\"Done\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 5,
          "line_number": 131,
          "code": "fun main() {\n    for i in 0..3 {\n        println(i);\n    }\n    println(\"For loop done\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 6,
          "line_number": 155,
          "code": "fun main() {\n    let number = 2;\n    match number {\n        1 => println(\"One\"),\n        2 => println(\"Two\"),\n        3 => println(\"Three\"),\n        _ => println(\"Other\")\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 7,
          "line_number": 179,
          "code": "fun main() {\n    let mut i = 0;\n    while i < 10 {\n        i = i + 1;\n        if i == 3 {\n            continue;\n        }\n        if i == 6 {\n            break;\n        }\n        println(i);\n    }\n    println(\"Loop ended\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 8,
          "line_number": 236,
          "code": "fun main() {\n    let x = 10;\n    let y = 5;\n\n    if x > y {\n        println(\"x is greater\");\n    } else if x < y {\n        println(\"y is greater\");\n    } else {\n        println(\"they are equal\");\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 9,
          "line_number": 252,
          "code": "fun main() {\n    // While loop\n    let mut count = 0;\n    while count < 3 {\n        println(\"Count: \" + count);\n        count = count + 1;\n    }\n\n    // For loop with range\n    for i in 1..4 {\n        println(\"Iteration: \" + i);\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 10,
          "line_number": 269,
          "code": "fun main() {\n    let number = 2;\n    match number {\n        1 => println(\"One\"),\n        2 => println(\"Two\"),\n        3 => println(\"Three\"),\n        _ => println(\"Other\")\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 11,
          "line_number": 296,
          "code": "fun main() {\n    let user_input = 75;\n    let threshold = 50;\n\n    if user_input > threshold {\n        println(\"High value: \" + user_input);\n    } else {\n        println(\"Normal value: \" + user_input);\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 12,
          "line_number": 310,
          "code": "fun main() {\n    let mut count = 0;\n    while count < 10 {\n        println(\"Count is: \" + count);\n        count = count + 1;\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 13,
          "line_number": 321,
          "code": "fun main() {\n    for i in 1..5 {\n        println(\"Processing item \" + i);\n    }\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch05-00-control-flow-tdd.md",
          "example_number": 14,
          "line_number": 330,
          "code": "fun main() {\n    let status_code = 200;\n    match status_code {\n        200 => println(\"Success\"),\n        404 => println(\"Not Found\"),\n        500 => println(\"Server Error\"),\n        _ => println(\"Unknown Status\")\n    }\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch01-02-hello-world": {
      "chapter": "ch01-02-hello-world",
      "total_examples": 8,
      "working_examples": 8,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 1,
          "line_number": 30,
          "code": "fun main() {\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 2,
          "line_number": 86,
          "code": "fun main() {\n    println(\"Hello\", \"World\", \"from\", \"Ruchy\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 3,
          "line_number": 106,
          "code": "fun main() {\n    let name = \"Alice\";\n    println(\"Hello,\", name);\n    \n    // String concatenation (interpolation coming in future versions)\n    println(\"Hello, \" + name + \"!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 4,
          "line_number": 131,
          "code": "fun main() {\n    println(\"The answer is\", 42);\n    println(\"Pi is approximately\", 3.14159);\n    println(\"Is Ruchy awesome?\", true);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 5,
          "line_number": 156,
          "code": "// ❌ This won't work - intentional error example\n// println(Hello, World!);\n//\n\n// Always use quotes for literal text.\n\nfun main() {\n    // ✅ Correct way:\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 6,
          "line_number": 176,
          "code": "// ❌ Quotes don't match - intentional error example\n// println(\"Hello, World!');\n//\n\n// Use either \"...\" or '...' but be consistent.\n\nfun main() {\n    // ✅ Correct way:\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 7,
          "line_number": 196,
          "code": "// ❌ Wrong capitalization - intentional error example\n// PrintLn(\"Hello, World!\");\n//\n\n\nfun main() {\n    // ✅ Correct way:\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world.md",
          "example_number": 8,
          "line_number": 222,
          "code": "fun main() {\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch06-00-data-structures-tdd": {
      "chapter": "ch06-00-data-structures-tdd",
      "total_examples": 8,
      "working_examples": 8,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun main() {\n    let greeting = \"Hello\";\n    let name = \"World\";\n    println(greeting);\n    println(name);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 2,
          "line_number": 54,
          "code": "fun main() {\n    let first = \"Hello\";\n    let second = \"Beautiful\";\n    let third = \"World\";\n    println(first);\n    println(second);\n    println(third);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 3,
          "line_number": 79,
          "code": "fun main() {\n    let number = 42;\n    let text = \"Answer\";\n    println(text);\n    println(number);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 4,
          "line_number": 119,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet message = \"Hello World\";\nlet name = \"Alice\";\nlet greeting = \"Welcome\";",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 5,
          "line_number": 129,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet text = \"Count\";\nlet number = 100;\nlet flag = true;",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 6,
          "line_number": 153,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet first_name = \"John\";\nlet last_name = \"Doe\";\nlet title = \"Mr.\";",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 7,
          "line_number": 163,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet label = \"Temperature\";\nlet value = 72;\nlet unit = \"Fahrenheit\";",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch06-00-data-structures-tdd.md",
          "example_number": 8,
          "line_number": 173,
          "code": "// Error: ✗ Compilation failed: Compilation failed:\nlet app_name = \"MyApp\";\nlet version = \"1.0\";\nlet debug = true;",
          "passed": true,
          "status": "working"
        }
      ]
    },
    "ch15-00-binary-compilation-deployment": {
      "chapter": "ch15-00-binary-compilation-deployment",
      "total_examples": 4,
      "working_examples": 1,
      "failing_examples": 3,
      "examples": [
        {
          "file": "src/ch15-00-binary-compilation-deployment.md",
          "example_number": 1,
          "line_number": 9,
          "code": "fun main() {\n    println(\"Hello from compiled Ruchy!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch15-00-binary-compilation-deployment.md",
          "example_number": 2,
          "line_number": 44,
          "code": "fun main() {\n    let args = std::env::args();\n    \n    if args.len() < 2 {\n        println(\"Usage: calculator <expression>\");\n        return;\n    }\n    \n    let expr = args[1];\n    let result = evaluate_expression(expr);\n    println(\"Result: {}\", result);\n}\n\nfun evaluate_expression(expr: String) -> f64 {\n    // Simple calculator - supports +, -, *, /\n    if expr.contains('+') {\n        let parts = expr.split('+');\n        return parts[0].parse::<f64>() + parts[1].parse::<f64>();\n    } else if expr.contains('-') {\n        let parts = expr.split('-');\n        return parts[0].parse::<f64>() - parts[1].parse::<f64>();\n    } else if expr.contains('*') {\n        let parts = expr.split('*');\n        return parts[0].parse::<f64>() * parts[1].parse::<f64>();\n    } else if expr.contains('/') {\n        let parts = expr.split('/');\n        let divisor = parts[1].parse::<f64>();\n        if divisor != 0.0 {\n            return parts[0].parse::<f64>() / divisor;\n        }\n    }\n    \n    expr.parse::<f64>()\n}",
          "passed": false,
          "status": "broken",
          "error": "✗ Compilation failed: Failed to parse Ruchy source\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch15-00-binary-compilation-deployment.md",
          "example_number": 3,
          "line_number": 90,
          "code": "fun main() {\n    let data = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    \n    let sum = calculate_sum(&data);\n    let avg = calculate_average(&data);\n    let max = find_maximum(&data);\n    \n    println(\"Data Analysis Results:\");\n    println(\"Sum: {}\", sum);\n    println(\"Average: {:.2}\", avg);\n    println(\"Maximum: {}\", max);\n}\n\nfun calculate_sum(data: &Vec<i32>) -> i32 {\n    let mut total = 0;\n    let mut i = 0;\n    while i < data.len() {\n        total = total + data[i];\n        i = i + 1;\n    }\n    total\n}\n\nfun calculate_average(data: &Vec<i32>) -> f64 {\n    let sum = calculate_sum(data);\n    (sum as f64) / (data.len() as f64)\n}\n\nfun find_maximum(data: &Vec<i32>) -> i32 {\n    let mut max = data[0];\n    let mut i = 1;\n    while i < data.len() {\n        if data[i] > max {\n            max = data[i];\n        }\n        i = i + 1;\n    }\n    max\n}",
          "passed": false,
          "status": "broken",
          "error": "✗ Compilation failed: Failed to parse Ruchy source\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        },
        {
          "file": "src/ch15-00-binary-compilation-deployment.md",
          "example_number": 4,
          "line_number": 142,
          "code": "fun main() {\n    println(\"Mathematical Functions Demo\");\n    \n    let n = 10;\n    println(\"Factorial of {}: {}\", n, factorial(n));\n    \n    let x = 25;\n    println(\"Square root of {}: {}\", x, integer_sqrt(x));\n    \n    let a = 48;\n    let b = 18;\n    println(\"GCD of {} and {}: {}\", a, b, gcd(a, b));\n}\n\nfun factorial(n: i32) -> i64 {\n    if n <= 1 {\n        1\n    } else {\n        (n as i64) * factorial(n - 1)\n    }\n}\n\nfun integer_sqrt(n: i32) -> i32 {\n    if n < 2 {\n        return n;\n    }\n    \n    let mut x = n / 2;\n    let mut prev = 0;\n    \n    while x != prev {\n        prev = x;\n        x = (x + n / x) / 2;\n    }\n    \n    x\n}\n\nfun gcd(mut a: i32, mut b: i32) -> i32 {\n    while b != 0 {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    a\n}",
          "passed": false,
          "status": "broken",
          "error": "✗ Compilation failed: Failed to parse Ruchy source\n",
          "errorCategory": "UNKNOWN",
          "rootCause": "Unknown error - needs manual investigation"
        }
      ]
    },
    "ch01-02-hello-world-tdd": {
      "chapter": "ch01-02-hello-world-tdd",
      "total_examples": 6,
      "working_examples": 6,
      "failing_examples": 0,
      "examples": [
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 1,
          "line_number": 32,
          "code": "fun main() {\n    println(\"Hello, World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 2,
          "line_number": 55,
          "code": "fun main() {\n    println(\"Hello,\");\n    println(\"World!\");\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 3,
          "line_number": 75,
          "code": "fun main() {\n    let greeting = \"Hello, World!\";\n    println(greeting);\n}",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 4,
          "line_number": 124,
          "code": "println(\"Your message here\");",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 5,
          "line_number": 132,
          "code": "let message = \"Your message\";\nprintln(message);",
          "passed": true,
          "status": "working"
        },
        {
          "file": "src/ch01-02-hello-world-tdd.md",
          "example_number": 6,
          "line_number": 141,
          "code": "println(\"First line\");\nprintln(\"Second line\");",
          "passed": true,
          "status": "working"
        }
      ]
    }
  }
}