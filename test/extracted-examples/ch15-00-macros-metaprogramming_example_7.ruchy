// Generate getters and setters
macro! accessors {
    ($struct_name:ident { $($field:ident : $type:ty),* }) => {
        impl $struct_name {
            $(
                fn $field(&self) -> &$type {
                    &self.$field
                }
                
                fn set_$field(&mut self, value: $type) {
                    self.$field = value
                }
            )*
        }
    }
}

struct Person {
    name: String
    age: i32
}

accessors!(Person { name: String, age: i32 })

// Now person.name() and person.set_name() exist!

// Generate enum variants and matchers
macro! define_opcodes {
    ($($name:ident = $value:expr),*) => {
        enum Opcode {
            $($name = $value),*
        }
        
        impl Opcode {
            fn from_byte(byte: u8) -> Option<Opcode> {
                match byte {
                    $($value => Some(Opcode::$name)),*
                    _ => None
                }
            }
            
            fn to_string(&self) -> &str {
                match self {
                    $(Opcode::$name => stringify!($name)),*
                }
            }
        }
    }
}

define_opcodes! {
    ADD = 0x01,
    SUB = 0x02,
    MUL = 0x03,
    DIV = 0x04,
    JMP = 0x10,
    JEQ = 0x11
}