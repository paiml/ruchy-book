// Different compression strategies
class CompressionContext {
    let strategy
    
    fn set_strategy(s) {
        strategy = s
    }
    
    fn compress(data) {
        return strategy.compress(data)
    }
}

class GzipStrategy {
    fn compress(data) {
        return gzip::compress(data, level: 6)
    }
}

class BrotliStrategy {
    fn compress(data) {
        return brotli::compress(data, quality: 4)
    }
}

class NoCompressionStrategy {
    fn compress(data) {
        return data
    }
}

// Choose strategy based on context
let compressor = CompressionContext::new()

if file_size > mb(10) {
    compressor.set_strategy(BrotliStrategy::new())  // Better for large files
} else if client_supports_gzip {
    compressor.set_strategy(GzipStrategy::new())
} else {
    compressor.set_strategy(NoCompressionStrategy::new())
}

let compressed = compressor.compress(file_data)