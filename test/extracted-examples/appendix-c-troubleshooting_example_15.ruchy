// ❌ Inefficient - creates many temporary strings
fn concat_inefficient(strings: &[&str]) -> String {
    let mut result = String::new()
    for s in strings {
        result = result + s  // Creates new string each time
    }
    result
}

// ✅ Efficient - reuses buffer
fn concat_efficient(strings: &[&str]) -> String {
    let mut result = String::new()
    for s in strings {
        result.push_str(s)  // Appends to existing string
    }
    result
}

// ✅ Even better - pre-allocate capacity
fn concat_with_capacity(strings: &[&str]) -> String {
    let total_len: usize = strings.iter().map(|s| s.len()).sum()
    let mut result = String::with_capacity(total_len)
    for s in strings {
        result.push_str(s)
    }
    result
}