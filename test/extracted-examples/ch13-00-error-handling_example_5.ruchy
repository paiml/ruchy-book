// Detailed error enum
enum DatabaseError {
    ConnectionFailed { host: String, port: i32 }
    QueryFailed { query: String, error: String }
    Timeout { duration: i32 }
    InvalidCredentials
}

impl Display for DatabaseError {
    fn fmt(self, f: Formatter) -> Result {
        match self {
            ConnectionFailed{host, port} => 
                write(f, f"Failed to connect to {host}:{port}")
            QueryFailed{query, error} => 
                write(f, f"Query failed: {query}\nError: {error}")
            Timeout{duration} => 
                write(f, f"Operation timed out after {duration}ms")
            InvalidCredentials => 
                write(f, "Invalid database credentials")
        }
    }
}

// Error with context
struct Error {
    kind: ErrorKind
    message: String
    source: Option<Box<Error>>
    backtrace: Backtrace
}

impl Error {
    fn new(kind: ErrorKind, message: String) -> Error {
        return Error{
            kind,
            message,
            source: None,
            backtrace: Backtrace::capture()
        }
    }
    
    fn with_source(mut self, source: Error) -> Error {
        self.source = Some(Box::new(source))
        return self
    }
    
    fn chain(self) -> Vec<String> {
        let mut messages = vec![self.message]
        let mut current = self.source
        
        while let Some(error) = current {
            messages.push(error.message)
            current = error.source
        }
        
        return messages
    }
}