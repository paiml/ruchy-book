// Fuzz testing for security
#[fuzz_test]
fn fuzz_parser(data: &[u8]) {
    // Fuzzer generates random inputs
    if let Ok(s) = std::str::from_utf8(data) {
        // Should never panic or crash
        let _ = parse_input(s)
    }
}

// Run fuzzer
$ ruchy fuzz parser_fuzz
=== Fuzzing parser_fuzz ===
Iterations: 1000000
Crashes found: 0
Hangs found: 0
Coverage: 95%

// Targeted fuzzing
#[fuzz_target]
fn fuzz_api_endpoint(input: FuzzInput) {
    let request = Request::from_fuzz(input)
    let response = handle_request(request)
    
    // Properties that should hold
    assert!(response.status() < 600)
    assert!(response.body().len() < 10_000_000)
}