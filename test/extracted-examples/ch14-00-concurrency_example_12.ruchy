#[test]
fn test_concurrent_access() {
    let shared = Arc::new(Mutex::new(Vec::new()))
    let handles = Vec::new()
    
    // Spawn concurrent writers
    for i in range(100) {
        let shared = shared.clone()
        handles.push(spawn move {
            let mut vec = shared.lock()
            vec.push(i)
        })
    }
    
    // Wait for completion
    for handle in handles {
        handle.join()
    }
    
    // Verify all writes succeeded
    let vec = shared.lock()
    assert_eq!(vec.len(), 100)
}

#[test]
async fn test_async_operations() {
    let results = join_all(vec![
        async_operation(1),
        async_operation(2),
        async_operation(3)
    ]).await
    
    assert!(results.all(|r| r.is_ok()))
}