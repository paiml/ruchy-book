// File: find_duplicates.ruchy
// Finds duplicate files based on content hash

println("=== Duplicate File Finder ===")

let search_dir = input("Enter directory to search: ")
let min_size = input("Minimum file size (bytes, 0 for all): ").to_i()

println(f"\nScanning {search_dir}...")

// Build file hash map
let file_hashes = {}
let duplicates = []

fn hash_file(path) {
    let content = read_bytes(path)
    return sha256(content)
}

fn scan_directory(dir) {
    let items = list_dir(dir)
    
    for item in items {
        let path = join_path(dir, item)
        
        if is_directory(path) {
            scan_directory(path)  // Recurse
        } else if is_file(path) {
            let size = file_size(path)
            
            if size >= min_size {
                let hash = hash_file(path)
                
                if file_hashes.has_key(hash) {
                    // Found duplicate
                    duplicates.push({
                        "original": file_hashes[hash],
                        "duplicate": path,
                        "size": size,
                        "hash": hash
                    })
                } else {
                    file_hashes[hash] = path
                }
            }
        }
    }
}

scan_directory(search_dir)

if duplicates.is_empty() {
    println("\n✅ No duplicate files found!")
} else {
    println(f"\n⚠️  Found {duplicates.len()} duplicate files:")
    
    let total_wasted = 0
    
    for dup in duplicates {
        println(f"\nOriginal: {dup.original}")
        println(f"Duplicate: {dup.duplicate}")
        println(f"Size: {format_size(dup.size)}")
        total_wasted += dup.size
    }
    
    println(f"\nTotal space wasted: {format_size(total_wasted)}")
    
    let action = input("\nDelete duplicates? (y/n): ")
    if action.lower() == "y" {
        for dup in duplicates {
            remove_file(dup.duplicate)
            println(f"Deleted: {dup.duplicate}")
        }
        println(f"\n✅ Freed {format_size(total_wasted)} of space!")
    }
}