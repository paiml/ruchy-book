// File: config_manager.ruchy
// Manages application configuration files

println("=== Configuration Manager ===")

let config_dir = "~/.config/myapp"
let config_file = join_path(config_dir, "config.json")

// Ensure config directory exists
if !dir_exists(config_dir) {
    create_dir_all(config_dir)
    println(f"Created config directory: {config_dir}")
}

// Load or create default configuration
let config = if file_exists(config_file) {
    parse_json(read_file(config_file))
} else {
    // Default configuration
    {
        "version": "1.0",
        "theme": "dark",
        "auto_save": true,
        "backup_interval": 3600,
        "recent_files": [],
        "window": {
            "width": 1200,
            "height": 800,
            "maximized": false
        }
    }
}

fn save_config() {
    let json = to_json_pretty(config)
    write_file(config_file, json)
    println("âœ… Configuration saved")
}

fn update_setting(key, value) {
    config[key] = value
    save_config()
}

fn add_recent_file(path) {
    if !config.recent_files.contains(path) {
        config.recent_files.insert(0, path)
        // Keep only last 10 files
        if config.recent_files.len() > 10 {
            config.recent_files = config.recent_files[..10]
        }
        save_config()
    }
}

// Interactive configuration editor
loop {
    println("\n=== Current Configuration ===")
    for key, value in config.items() {
        println(f"{key}: {value}")
    }
    
    println("\nOptions:")
    println("1. Change theme")
    println("2. Toggle auto-save")
    println("3. Set backup interval")
    println("4. Clear recent files")
    println("5. Reset to defaults")
    println("6. Exit")
    
    let choice = input("\nChoice: ")
    
    match choice {
        "1" => {
            let theme = input("Theme (light/dark): ")
            update_setting("theme", theme)
        }
        "2" => {
            config.auto_save = !config.auto_save
            save_config()
        }
        "3" => {
            let interval = input("Backup interval (seconds): ").to_i()
            update_setting("backup_interval", interval)
        }
        "4" => {
            config.recent_files = []
            save_config()
        }
        "5" => {
            // Reset to defaults
            remove_file(config_file)
            println("Configuration reset!")
            break
        }
        "6" => break
        _ => println("Invalid choice")
    }
}