// sysmon.ruchy - System monitoring dashboard
use sysinfo::{System, SystemExt, ProcessExt, CpuExt};
use tui::{Terminal, Frame, backend::CrosstermBackend};
use crossterm::event::{self, Event, KeyCode};

struct App {
    system: System,
    cpu_history: Vec<f32>,
    memory_history: Vec<f32>,
    selected_process: Option<usize>,
    processes: Vec<ProcessInfo>,
}

#[derive(Clone)]
struct ProcessInfo {
    pid: u32,
    name: String,
    cpu_usage: f32,
    memory: u64,
    status: String,
}

impl App {
    fn new() -> Self {
        let mut system = System::new_all();
        system.refresh_all();
        
        App {
            system,
            cpu_history: Vec::with_capacity(60),
            memory_history: Vec::with_capacity(60),
            selected_process: None,
            processes: Vec::new(),
        }
    }
    
    fn update(&mut self) {
        self.system.refresh_all();
        
        // Update CPU history
        let cpu_usage = self.system.global_cpu_info().cpu_usage();
        self.cpu_history.push(cpu_usage);
        if self.cpu_history.len() > 60 {
            self.cpu_history.remove(0);
        }
        
        // Update memory history
        let used_memory = self.system.used_memory();
        let total_memory = self.system.total_memory();
        let memory_usage = (used_memory as f32 / total_memory as f32) * 100.0;
        self.memory_history.push(memory_usage);
        if self.memory_history.len() > 60 {
            self.memory_history.remove(0);
        }
        
        // Update process list
        self.processes = self.system.processes()
            .iter()
            .map(|(pid, process)| ProcessInfo {
                pid: pid.as_u32(),
                name: process.name().to_string(),
                cpu_usage: process.cpu_usage(),
                memory: process.memory(),
                status: format!("{:?}", process.status()),
            })
            .collect();
        
        // Sort by CPU usage
        self.processes.sort_by(|a, b| 
            b.cpu_usage.partial_cmp(&a.cpu_usage).unwrap()
        );
    }
    
    fn draw(&self, frame: &mut Frame<impl Backend>) {
        let chunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Length(3),
                Constraint::Percentage(30),
                Constraint::Percentage(30),
                Constraint::Percentage(40),
            ])
            .split(frame.size());
        
        // Header
        let header = Paragraph::new("System Monitor - Press 'q' to quit")
            .style(Style::default().fg(Color::Cyan))
            .block(Block::default().borders(Borders::ALL));
        frame.render_widget(header, chunks[0]);
        
        // CPU Chart
        let cpu_data: Vec<(f64, f64)> = self.cpu_history
            .iter()
            .enumerate()
            .map(|(i, &val)| (i as f64, val as f64))
            .collect();
        
        let cpu_chart = Chart::new(vec![
            Dataset::default()
                .name("CPU")
                .marker(symbols::Marker::Dot)
                .style(Style::default().fg(Color::Yellow))
                .data(&cpu_data),
        ])
        .block(Block::default().title("CPU Usage").borders(Borders::ALL))
        .x_axis(Axis::default()
            .bounds([0.0, 60.0])
            .labels(vec!["60s", "30s", "Now"]))
        .y_axis(Axis::default()
            .bounds([0.0, 100.0])
            .labels(vec!["0%", "50%", "100%"]));
        
        frame.render_widget(cpu_chart, chunks[1]);
        
        // Memory Chart
        let memory_data: Vec<(f64, f64)> = self.memory_history
            .iter()
            .enumerate()
            .map(|(i, &val)| (i as f64, val as f64))
            .collect();
        
        let memory_chart = Chart::new(vec![
            Dataset::default()
                .name("Memory")
                .marker(symbols::Marker::Dot)
                .style(Style::default().fg(Color::Blue))
                .data(&memory_data),
        ])
        .block(Block::default().title("Memory Usage").borders(Borders::ALL))
        .x_axis(Axis::default()
            .bounds([0.0, 60.0])
            .labels(vec!["60s", "30s", "Now"]))
        .y_axis(Axis::default()
            .bounds([0.0, 100.0])
            .labels(vec!["0%", "50%", "100%"]));
        
        frame.render_widget(memory_chart, chunks[2]);
        
        // Process List
        let processes: Vec<ListItem> = self.processes
            .iter()
            .take(10)
            .map(|p| {
                let content = format!("{:5} {:20} {:6.1}% {:8}",
                    p.pid,
                    p.name,
                    p.cpu_usage,
                    format_bytes(p.memory)
                );
                ListItem::new(content)
            })
            .collect();
        
        let process_list = List::new(processes)
            .block(Block::default()
                .title("Top Processes (PID | Name | CPU | Memory)")
                .borders(Borders::ALL))
            .highlight_style(Style::default().bg(Color::DarkGray));
        
        frame.render_widget(process_list, chunks[3]);
    }
}

#[tokio::main]
async fn main() -> Result<()> {
    // Setup terminal
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;
    
    let mut app = App::new();
    let mut last_update = Instant::now();
    
    loop {
        // Update data every second
        if last_update.elapsed() >= Duration::from_secs(1) {
            app.update();
            last_update = Instant::now();
        }
        
        // Draw UI
        terminal.draw(|f| app.draw(f))?;
        
        // Handle events
        if event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                match key.code {
                    KeyCode::Char('q') => break,
                    KeyCode::Up => {
                        if let Some(selected) = &mut app.selected_process {
                            if *selected > 0 {
                                *selected -= 1;
                            }
                        }
                    }
                    KeyCode::Down => {
                        if let Some(selected) = &mut app.selected_process {
                            if *selected < app.processes.len() - 1 {
                                *selected += 1;
                            }
                        } else {
                            app.selected_process = Some(0);
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    
    // Restore terminal
    disable_raw_mode()?;
    execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
    terminal.show_cursor()?;
    
    Ok(())
}