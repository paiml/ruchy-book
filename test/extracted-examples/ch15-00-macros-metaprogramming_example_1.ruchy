// Define a macro for JSON-like syntax
macro! json {
    // Match JSON-like input
    ({ $($key:ident : $value:expr),* }) => {
        {
            let mut map = HashMap::new()
            $(
                map.insert(stringify!($key), json!($value))
            )*
            Value::Object(map)
        }
    }
    ([ $($element:expr),* ]) => {
        Value::Array(vec![$(json!($element)),*])
    }
    ($other:expr) => {
        Value::from($other)
    }
}

// Use it like native syntax!
let user = json!({
    name: "Alice",
    age: 30,
    emails: ["alice@example.com", "alice@work.com"],
    active: true,
    metadata: {
        created: "2024-01-01",
        tags: ["premium", "verified"]
    }
})

// Macro for automatic implementation
#[derive(Debug, Clone, Serialize)]
struct User {
    name: String
    email: String
    age: i32
}

// The derive macro generates all the boilerplate!