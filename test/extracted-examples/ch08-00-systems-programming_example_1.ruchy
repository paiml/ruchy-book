// File: system_monitor.ruchy
// Real-time system resource monitoring

use std::system;
use std::process;

println("=== System Monitor ===")

// Get system information
let cpu_count = system::cpu_count()
let total_memory = system::total_memory()
let hostname = system::hostname()
let os_info = system::os_info()

println(f"Host: {hostname}")
println(f"OS: {os_info.name} {os_info.version}")
println(f"CPUs: {cpu_count}")
println(f"Memory: {format_size(total_memory)}")
println("")

// Monitor resources in real-time
loop {
    let cpu_usage = system::cpu_usage()
    let memory_info = system::memory_info()
    let disk_io = system::disk_io_stats()
    let network_stats = system::network_stats()
    
    // Clear screen and show header
    clear_screen()
    println("System Monitor - Press Ctrl+C to exit")
    println("=" * 50)
    
    // CPU Usage
    println(f"CPU: {cpu_usage:.1%} |{'█' * (cpu_usage * 50).to_i()}{'░' * (50 - cpu_usage * 50).to_i()}|")
    
    // Memory Usage
    let mem_percent = memory_info.used / memory_info.total
    println(f"MEM: {mem_percent:.1%} |{'█' * (mem_percent * 50).to_i()}{'░' * (50 - mem_percent * 50).to_i()}|")
    println(f"     {format_size(memory_info.used)} / {format_size(memory_info.total)}")
    
    // Disk I/O
    println(f"Disk Read:  {format_size(disk_io.read_bytes)}/s")
    println(f"Disk Write: {format_size(disk_io.write_bytes)}/s")
    
    // Network
    println(f"Net Down: {format_size(network_stats.download_speed)}/s")
    println(f"Net Up:   {format_size(network_stats.upload_speed)}/s")
    
    // Top processes
    println("\nTop Processes by CPU:")
    let processes = process::list()
        .sort_by(|p| -p.cpu_percent)
        .take(5)
    
    for proc in processes {
        println(f"  {proc.pid:6} {proc.name:20} {proc.cpu_percent:5.1}%")
    }
    
    sleep(1000)  // Update every second
}