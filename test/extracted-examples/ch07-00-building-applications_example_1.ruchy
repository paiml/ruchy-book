// File: note_keeper.ruchy
// A complete note-taking application

let APP_NAME = "NoteKeeper"
let VERSION = "1.0.0"
let NOTES_DIR = expand_home("~/.notes")
let NOTES_INDEX = join_path(NOTES_DIR, "index.json")

// Initialize application
fn init_app() {
    if !dir_exists(NOTES_DIR) {
        create_dir_all(NOTES_DIR)
        println(f"Created notes directory: {NOTES_DIR}")
    }
    
    if !file_exists(NOTES_INDEX) {
        let initial_index = {
            "version": VERSION,
            "notes": [],
            "tags": [],
            "last_modified": current_datetime()
        }
        save_index(initial_index)
    }
}

fn load_index() {
    let content = read_file(NOTES_INDEX)
    return parse_json(content)
}

fn save_index(index) {
    index.last_modified = current_datetime()
    let json = to_json_pretty(index)
    write_file(NOTES_INDEX, json)
}

fn create_note() {
    println("\nüìù Create New Note")
    let title = input("Title: ")
    let content = input_multiline("Content (end with empty line):\n")
    let tags = input("Tags (comma-separated): ").split(",").map(|t| t.trim())
    
    let note_id = generate_id()
    let note_file = join_path(NOTES_DIR, f"{note_id}.md")
    
    let note = {
        "id": note_id,
        "title": title,
        "created": current_datetime(),
        "modified": current_datetime(),
        "tags": tags,
        "file": note_file
    }
    
    // Save note content
    let markdown = f"# {title}

Created: {note.created}
Tags: {tags.join(', ')}

---

{content}"
    
    write_file(note_file, markdown)
    
    // Update index
    let index = load_index()
    index.notes.push(note)
    index.tags = index.tags.union(tags)
    save_index(index)
    
    println(f"‚úÖ Note created: {title}")
}

fn list_notes(filter_tag = null) {
    let index = load_index()
    let notes = index.notes
    
    if filter_tag {
        notes = notes.filter(|n| n.tags.contains(filter_tag))
        println(f"\nüìã Notes tagged '{filter_tag}':")
    } else {
        println(f"\nüìã All Notes ({notes.len()} total):")
    }
    
    if notes.is_empty() {
        println("  No notes found")
        return
    }
    
    for i, note in notes.enumerate() {
        let age = time_ago(note.created)
        println(f"{i+1:3}. {note.title}")
        println(f"     Tags: {note.tags.join(', ')} | Created: {age}")
    }
}

fn search_notes(query) {
    let index = load_index()
    let results = []
    
    for note in index.notes {
        // Search in title
        if note.title.lower().contains(query.lower()) {
            results.push(note)
            continue
        }
        
        // Search in content
        let content = read_file(note.file)
        if content.lower().contains(query.lower()) {
            results.push(note)
        }
    }
    
    println(f"\nüîç Search results for '{query}': {results.len()} matches")
    
    for note in results {
        println(f"  ‚Ä¢ {note.title}")
        
        // Show context
        let content = read_file(note.file)
        let lines = content.lines()
        for line in lines {
            if line.lower().contains(query.lower()) {
                println(f"    ...{line.trim()}...")
                break
            }
        }
    }
}

fn view_note(index_num) {
    let index = load_index()
    
    if index_num < 1 || index_num > index.notes.len() {
        println("‚ùå Invalid note number")
        return
    }
    
    let note = index.notes[index_num - 1]
    let content = read_file(note.file)
    
    println("\n" + "="*50)
    println(content)
    println("="*50)
}

fn export_notes(format) {
    let index = load_index()
    let export_file = f"notes_export_{current_date()}.{format}"
    
    match format {
        "json" => {
            let data = {
                "exported": current_datetime(),
                "notes": []
            }
            
            for note in index.notes {
                let content = read_file(note.file)
                data.notes.push({
                    "title": note.title,
                    "content": content,
                    "tags": note.tags,
                    "created": note.created
                })
            }
            
            write_file(export_file, to_json_pretty(data))
        }
        "markdown" => {
            let markdown = f"# My Notes
Exported: {current_datetime()}

"
            for note in index.notes {
                let content = read_file(note.file)
                markdown += f"

---

{content}
"
            }
            
            write_file(export_file, markdown)
        }
        _ => {
            println(f"‚ùå Unsupported format: {format}")
            return
        }
    }
    
    println(f"‚úÖ Exported {index.notes.len()} notes to {export_file}")
}

fn show_menu() {
    println(f"\n=== {APP_NAME} v{VERSION} ===")
    println("1. Create note")
    println("2. List all notes")
    println("3. Search notes")
    println("4. View note")
    println("5. List by tag")
    println("6. Export notes")
    println("7. Statistics")
    println("8. Quit")
}

fn show_statistics() {
    let index = load_index()
    let total_notes = index.notes.len()
    let total_tags = index.tags.len()
    
    // Calculate word count
    let total_words = 0
    for note in index.notes {
        let content = read_file(note.file)
        total_words += content.split_whitespace().len()
    }
    
    // Find most used tags
    let tag_counts = {}
    for note in index.notes {
        for tag in note.tags {
            tag_counts[tag] = tag_counts.get(tag, 0) + 1
        }
    }
    
    println(f"\nüìä NoteKeeper Statistics")
    println(f"Total notes: {total_notes}")
    println(f"Total words: {total_words}")
    println(f"Average words per note: {total_words / max(total_notes, 1)}")
    println(f"Unique tags: {total_tags}")
    
    if !tag_counts.is_empty() {
        println("\nTop tags:")
        let sorted_tags = tag_counts.items().sort_by(|item| -item.value)
        for tag, count in sorted_tags[..min(5, sorted_tags.len())] {
            println(f"  ‚Ä¢ {tag}: {count} notes")
        }
    }
}

// Main application loop
fn main() {
    init_app()
    
    println(f"Welcome to {APP_NAME}!")
    println("Your personal note-taking assistant")
    
    loop {
        show_menu()
        let choice = input("\nChoice: ")
        
        match choice {
            "1" => create_note()
            "2" => list_notes()
            "3" => {
                let query = input("Search for: ")
                search_notes(query)
            }
            "4" => {
                list_notes()
                let num = input("\nNote number to view: ").to_i()
                view_note(num)
            }
            "5" => {
                let index = load_index()
                println("\nAvailable tags:")
                for tag in index.tags {
                    println(f"  ‚Ä¢ {tag}")
                }
                let tag = input("\nFilter by tag: ")
                list_notes(tag)
            }
            "6" => {
                let format = input("Export format (json/markdown): ")
                export_notes(format)
            }
            "7" => show_statistics()
            "8" => {
                println("üëã Thanks for using NoteKeeper!")
                break
            }
            _ => println("‚ùå Invalid choice")
        }
    }
}

// Run the application
main()