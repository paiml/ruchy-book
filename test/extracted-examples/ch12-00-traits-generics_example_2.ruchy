// Simple trait
trait Drawable {
    fn draw(self)
}

// Trait with multiple methods
trait Container {
    fn len(self) -> i32
    fn is_empty(self) -> bool {
        return self.len() == 0  // Default implementation
    }
    fn clear(mut self)
}

// Traits with associated types
trait Iterator {
    type Item
    
    fn next(mut self) -> Option<Item>
    
    fn collect(mut self) -> Vec<Item> {
        let result = Vec::new()
        while let Some(item) = self.next() {
            result.push(item)
        }
        return result
    }
}

// Traits with constraints
trait Comparable: Eq {
    fn compare(self, other: Self) -> Ordering
}

// Trait inheritance
trait Animal {
    fn speak(self)
}

trait Dog: Animal {
    fn wag_tail(self)
}