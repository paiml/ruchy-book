// File: network_scanner.ruchy
// Scan network for open ports and services

use std::net;
use std::async;

println("=== Network Scanner ===")

fn scan_port(host, port, timeout = 1000) {
    try {
        let socket = net::TcpStream::connect_timeout(
            f"{host}:{port}", 
            timeout
        )
        socket.close()
        return true
    } catch {
        return false
    }
}

fn identify_service(port) {
    let services = {
        21: "FTP",
        22: "SSH",
        23: "Telnet",
        25: "SMTP",
        53: "DNS",
        80: "HTTP",
        110: "POP3",
        143: "IMAP",
        443: "HTTPS",
        445: "SMB",
        3306: "MySQL",
        5432: "PostgreSQL",
        6379: "Redis",
        8080: "HTTP-Alt",
        8443: "HTTPS-Alt",
        27017: "MongoDB"
    }
    
    return services.get(port, "Unknown")
}

fn scan_host(host, ports) {
    println(f"\nScanning {host}...")
    let open_ports = []
    
    // Parallel port scanning
    let tasks = []
    for port in ports {
        tasks.push(async {
            if scan_port(host, port) {
                return port
            }
            return null
        })
    }
    
    let results = async::wait_all(tasks)
    
    for port in results {
        if port {
            let service = identify_service(port)
            open_ports.push({port: port, service: service})
            println(f"  âœ“ Port {port:5} open - {service}")
        }
    }
    
    return open_ports
}

// Get scan parameters
let target = input("Target host (IP or domain): ")
let scan_type = input("Scan type (quick/full/custom): ")

let ports = match scan_type {
    "quick" => [21, 22, 23, 25, 80, 443, 3306, 5432, 8080]
    "full" => range(1, 65535)
    "custom" => {
        let range_str = input("Port range (e.g., 1-1000): ")
        let parts = range_str.split("-")
        range(parts[0].to_i(), parts[1].to_i())
    }
    _ => [80, 443]
}

println(f"\nScanning {ports.len()} ports on {target}...")
let start_time = current_time_ms()

let results = scan_host(target, ports)

let duration = (current_time_ms() - start_time) / 1000
println(f"\nScan complete in {duration:.1}s")
println(f"Found {results.len()} open ports")

// Generate report
if results.len() > 0 {
    println("\n=== Open Services ===")
    for item in results.sort_by(|r| r.port) {
        println(f"{item.port:5} - {item.service}")
    }
}