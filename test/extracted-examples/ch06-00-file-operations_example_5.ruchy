// File: smart_backup.ruchy
// Creates timestamped backups of important files

println("=== Smart Backup System ===")

let backup_config = {
    "documents": ["~/Documents", "*.doc", "*.pdf", "*.txt"],
    "code": ["~/Projects", "*.py", "*.js", "*.rs"],
    "config": ["~/.config", "*.conf", "*.json", "*.yaml"]
}

let backup_root = "~/Backups"
let timestamp = current_datetime().format("%Y%m%d_%H%M%S")
let backup_dir = join_path(backup_root, f"backup_{timestamp}")

create_dir_all(backup_dir)
println(f"Creating backup at: {backup_dir}")

let total_files = 0
let total_size = 0

for category, config in backup_config.items() {
    let source_dir = expand_home(config[0])
    let patterns = config[1..]
    
    let category_dir = join_path(backup_dir, category)
    create_dir(category_dir)
    
    println(f"\nüìÅ Backing up {category}...")
    
    for pattern in patterns {
        let files = glob(join_path(source_dir, pattern))
        
        for file in files {
            let size = file_size(file)
            let relative_path = relative_to(file, source_dir)
            let backup_path = join_path(category_dir, relative_path)
            
            // Create parent directories
            let parent = parent_dir(backup_path)
            if !dir_exists(parent) {
                create_dir_all(parent)
            }
            
            // Copy file to backup
            copy_file(file, backup_path)
            total_files += 1
            total_size += size
            
            println(f"  ‚úì {relative_path} ({format_size(size)})")
        }
    }
}

println(f"\n‚úÖ Backup complete!")
println(f"Files backed up: {total_files}")
println(f"Total size: {format_size(total_size)}")
println(f"Location: {backup_dir}")

// Create backup summary
let summary = f"Backup Summary
==============
Date: {timestamp}
Files: {total_files}
Size: {format_size(total_size)}
Categories: {backup_config.keys().join(', ')}
"

write_file(join_path(backup_dir, "summary.txt"), summary)