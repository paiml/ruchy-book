// Async Result type
async fn fetch_data(url: String) -> Result<Data, Error> {
    let response = http::get(url).await?
    let parsed = parse_response(response).await?
    return Ok(parsed)
}

// Try multiple sources
async fn get_data_with_fallback() -> Result<Data, Error> {
    // Try primary source
    if let Ok(data) = fetch_data(PRIMARY_URL).await {
        return Ok(data)
    }
    
    // Try backup source
    if let Ok(data) = fetch_data(BACKUP_URL).await {
        return Ok(data)
    }
    
    // Try cache
    if let Some(cached) = get_cached_data().await {
        log::warn("Using stale cached data")
        return Ok(cached)
    }
    
    return Err(Error::NoDataAvailable)
}

// Parallel error handling
async fn fetch_all(urls: Vec<String>) -> Vec<Result<Data, Error>> {
    let futures = urls.map(|url| fetch_data(url))
    return join_all(futures).await
}