// Function as parameter
fn apply_operation(x: i32, y: i32, op: fn(i32, i32) -> i32) -> i32 {
    op(x, y)
}

// Function returning function
fn make_adder(n: i32) -> impl Fn(i32) -> i32 {
    move |x| x + n
}

// Generic function
fn map_over<T, U, F>(items: Vec<T>, f: F) -> Vec<U>
where F: Fn(T) -> U
{
    items.into_iter().map(f).collect()
}