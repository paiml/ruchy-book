/// # Examples Section
/// 
/// ## Basic Usage
/// 
/// The simplest way to use this library:
/// 
/// ```
/// use mylib::Thing;
/// 
/// let thing = Thing::default();
/// thing.process()?;
/// ```
/// 
/// ## Advanced Usage
/// 
/// For more control, configure manually:
/// 
/// ```
/// use mylib::{Thing, Config};
/// 
/// let config = Config::builder()
///     .timeout(5000)
///     .retries(3)
///     .build()?;
/// 
/// let thing = Thing::with_config(config);
/// ```
/// 
/// ## Error Handling
/// 
/// All operations return `Result`:
/// 
/// ```
/// match thing.risky_operation() {
///     Ok(value) => println!("Success: {}", value),
///     Err(e) => eprintln!("Error: {}", e),
/// }
/// ```
/// 
/// ## Complete Example
/// 
/// Here's a full working program:
/// 
/// ```no_run
/// use mylib::{Thing, Config, Error};
/// 
/// fn main() -> Result<(), Error> {
///     let config = Config::from_env()?;
///     let thing = Thing::with_config(config);
///     
///     for item in thing.process_all()? {
///         println!("Processed: {:?}", item);
///     }
///     
///     Ok(())
/// }
/// ```