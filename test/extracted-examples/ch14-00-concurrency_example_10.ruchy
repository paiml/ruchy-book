async fn web_server() {
    let listener = TcpListener::bind("0.0.0.0:8080").await
    
    loop {
        let (socket, addr) = listener.accept().await
        
        // Handle each connection concurrently
        spawn async {
            handle_connection(socket, addr).await
        }
    }
}

async fn handle_connection(socket: TcpStream, addr: SocketAddr) {
    let (reader, writer) = socket.split()
    
    let request = read_http_request(reader).await
    let response = route_request(request).await
    
    write_http_response(writer, response).await
}

// Connection pool for database
let db_pool = ConnectionPool::new(20)

async fn handle_request(req: Request) -> Response {
    let conn = db_pool.get().await
    
    let data = conn.query("SELECT * FROM users").await
    
    db_pool.return(conn)
    
    Response::json(data)
}