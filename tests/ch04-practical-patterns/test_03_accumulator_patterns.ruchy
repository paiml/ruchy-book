// Simplified accumulator patterns using single values instead of arrays
fun calculate_total() -> i32 {
    // Demonstrate accumulator pattern with known values
    let mut total = 0;
    let prices = [10, 25, 5, 15, 8];
    let mut i = 0;
    
    while i < 5 {
        total = total + prices[i];
        i = i + 1;
    }
    
    total
}

fun find_maximum() -> i32 {
    let numbers = [10, 25, 5, 15, 8];
    let mut max_value = numbers[0];
    let mut i = 1;
    
    while i < 5 {
        if numbers[i] > max_value {
            max_value = numbers[i];
        }
        i = i + 1;
    }
    
    max_value
}

fun count_positives() -> i32 {
    let numbers = [-3, 7, -1, 12, 0];
    let mut count = 0;
    let mut i = 0;
    
    while i < 5 {
        if numbers[i] > 0 {
            count = count + 1;
        }
        i = i + 1;
    }
    
    count
}

fun main() {
    println("Testing accumulator patterns...");
    
    let total = calculate_total();
    let maximum = find_maximum();
    let positive_count = count_positives();
    
    println("Prices: [10, 25, 5, 15, 8]");
    println("Total: {}", total);
    println("Maximum: {}", maximum);
    
    println("Numbers: [-3, 7, -1, 12, 0]");
    println("Positive numbers: {}", positive_count);
    
    println("âœ… Accumulator pattern tests complete");
}